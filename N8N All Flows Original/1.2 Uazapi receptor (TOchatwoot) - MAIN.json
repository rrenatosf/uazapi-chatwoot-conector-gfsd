{
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2880,
        0
      ],
      "id": "bff526d3-f10b-48b9-bc30-1015f884930e",
      "name": "Workflow Trigger"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "073177c9-992a-423e-a9e2-cb2042e8e6cc",
                    "leftValue": "={{ $('Nml - Webhook Data').item.json.eventType }}",
                    "rightValue": "=messages",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "messages"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Nml - Webhook Data').item.json.eventType }}",
                    "rightValue": "=messages_update",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "573badeb-53f1-4540-8f8b-7fc10122e710"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "messages_update"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        304,
        16
      ],
      "id": "a3344820-3e14-45b7-b060-2496b219969b",
      "name": "Switch"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "29933430-de0f-47d5-ad7c-3b03ab55bae7",
              "leftValue": "={{ $('Get Instance Chatwoot Data').item.json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1552,
        0
      ],
      "id": "de32b3c5-4cb9-4683-b64e-54b95b3b99c6",
      "name": "No data?"
    },
    {
      "parameters": {
        "databaseId": "={{ 228 }}",
        "tableId": "={{ 953 }}",
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 9366,
                "value": "={{ $('Workflow Trigger').item.json.body.token }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -1312,
        -240
      ],
      "id": "8d154d90-2b8a-4bf5-bedc-9cf96e69afd6",
      "name": "Get Instance&Chatwoot Data",
      "credentials": {
        "baserowApi": {
          "id": "XgJZ5iZG1GTSMra1",
          "name": "[yearsinbox@gmail]"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=api:instance:{{ $('Workflow Trigger').item.json.body.token }}",
        "value": "={{ $('Nml - Instance Chatwoot Data1').item.json.toJsonString() }}",
        "expire": true,
        "ttl": 2592000
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -928,
        -240
      ],
      "id": "92a16e7b-49b8-4b65-b4ab-085617c8e15f",
      "name": "Set Instance TTL 30D",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=api:instance:{{ $('Normalizer Baserow Data').item.json.instanceToken }}",
        "value": "={{ $json.toJsonString() }}",
        "expire": true,
        "ttl": 2592000
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -528,
        -752
      ],
      "id": "5689a667-7a31-4b70-944a-2fcd5825c652",
      "name": "Set Instance TTL 30D1",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=api:instance:{{ $('Workflow Trigger').item.json.body.old_items[0][\"Instance Token\"] }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1312,
        -768
      ],
      "id": "f337f5af-f7bb-4e39-8ae6-c9e257a73c68",
      "name": "Delete Instance Key",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('Redis Instance Key').item.json.instanceKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1760,
        0
      ],
      "id": "d9e11dfa-f41b-42c8-ad91-755c969d2f0c",
      "name": "Get Instance Chatwoot Data",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "body.old_items[0].Instances",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1312,
        -576
      ],
      "id": "fe1282de-53fc-4193-a8ad-fe57e97c716b",
      "name": "Inst√¢ncias a serem editadas"
    },
    {
      "parameters": {
        "jsCode": "// O baserow data pode ser 1. o pr√≥prio payload do webhook enviado pelo Baserow, ou 2. o fruto da contulta (switch fallback)!\n\n// Passar os dados do webhook pra c√° pode at√© parecer redundante,\n// mas estamos padronizando o payload para o pr√≥ximo node!\n\nconst instanceLine = $('Workflow Trigger').item.json.body.items[0];\n\nlet multipleRows = null;\nif ($('Get InstanceSS Rows').isExecuted) {\n  multipleRows = $('Get InstanceSS Rows').item.json || $json;\n}\n\n\n\n// N√£o posso assumir que porque webhookk tem items (ele ter√° nos dois casos, a quest√£o √© edi√ß√£o em uma outra linha n√£o vai ter determinados campos). Precisamos verificar se webhookData tem a estrutura esperada (pelo menos uma das propriedades da tabela de inst√¢ncias)\nconst sourceData = (instanceLine && instanceLine[\"Instance Name\"]) ? instanceLine : multipleRows;\n\n\n// Normalizando os dados\nconst normalizedData = {\n  instanceName: sourceData[\"Instance Name\"],\n  instanceUrl: sourceData[\"Instance Url\"],\n  instanceToken: sourceData[\"Instance Token\"],\n  installationUrl: sourceData[\"Chatwoot URL\"][0].value,\n  accountName: sourceData[\"Chatwoot Account (SET!)\"][0].value,\n  accountId: sourceData[\"Chatwoot Account Id\"][0].value,\n  userName: sourceData[\"Chatwoot User Name\"][0].value,\n  userToken: sourceData[\"User Token\"][0].value,\n  inboxId: sourceData[\"Inbox Id üö®\"],\n  inboxStatus: sourceData[\"Inbox Status\"].value\n};\n\n// Retorna os dados normalizados\nreturn normalizedData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1104,
        -768
      ],
      "id": "faec487a-b46c-459a-9670-f52fa24058c2",
      "name": "Normalizer Baserow Data"
    },
    {
      "parameters": {
        "jsCode": "// C√≥digo JavaScript para N8N - Compara√ß√£o de Payloads\nconst payload = $('Workflow Trigger').item.json.body;\n\n// Valida√ß√£o inicial - verifica se os arrays existem\nif (!payload || !payload.items || !payload.old_items) {\n  return [{ \n    json: {\n      error: \"Payload inv√°lido - items ou old_items n√£o encontrados\",\n      payload_received: payload \n    }\n  }];\n}\n\n// Verifica se os arrays est√£o vazios\nif (payload.items.length === 0 && payload.old_items.length === 0) {\n  return [{ \n    json: {\n      message: \"Nenhum item para comparar - arrays vazios\" \n    }\n  }];\n}\n\nfunction compareObjects(newObj, oldObj, path = '') {\n  const changes = [];\n  \n  // Fun√ß√£o auxiliar para comparar valores profundamente\n  function deepEqual(a, b) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (typeof a !== typeof b) return false;\n    \n    if (Array.isArray(a) && Array.isArray(b)) {\n      if (a.length !== b.length) return false;\n      for (let i = 0; i < a.length; i++) {\n        if (!deepEqual(a[i], b[i])) return false;\n      }\n      return true;\n    }\n    \n    if (typeof a === 'object' && typeof b === 'object') {\n      const keysA = Object.keys(a);\n      const keysB = Object.keys(b);\n      if (keysA.length !== keysB.length) return false;\n      \n      for (let key of keysA) {\n        if (!keysB.includes(key) || !deepEqual(a[key], b[key])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    \n    return false;\n  }\n  \n  // Compara todas as propriedades do objeto novo\n  for (const key in newObj) {\n    const currentPath = path ? `${path}.${key}` : key;\n    const newValue = newObj[key];\n    const oldValue = oldObj[key];\n    \n    if (!deepEqual(newValue, oldValue)) {\n      changes.push({\n        property: currentPath,\n        old_value: oldValue,\n        new_value: newValue\n      });\n    }\n  }\n  \n  // Verifica propriedades que existiam no objeto antigo mas n√£o no novo\n  for (const key in oldObj) {\n    if (!(key in newObj)) {\n      const currentPath = path ? `${path}.${key}` : key;\n      changes.push({\n        property: currentPath,\n        old_value: oldObj[key],\n        new_value: undefined\n      });\n    }\n  }\n  \n  return changes;\n}\n\nfunction findChangesInItems(items, oldItems) {\n  const allChanges = [];\n  \n  // Compara cada item com seu correspondente em old_items\n  for (let i = 0; i < Math.max(items.length, oldItems.length); i++) {\n    const newItem = items[i];\n    const oldItem = oldItems[i];\n    \n    if (!newItem && oldItem) {\n      // Item foi removido\n      allChanges.push({\n        item_index: i,\n        item_id: oldItem.id,\n        change_type: 'item_removed',\n        property: 'entire_item',\n        old_value: oldItem,\n        new_value: null\n      });\n    } else if (newItem && !oldItem) {\n      // Item foi adicionado\n      allChanges.push({\n        item_index: i,\n        item_id: newItem.id,\n        change_type: 'item_added',\n        property: 'entire_item',\n        old_value: null,\n        new_value: newItem\n      });\n    } else if (newItem && oldItem) {\n      // Compara propriedades do item\n      const itemChanges = compareObjects(newItem, oldItem);\n      \n      itemChanges.forEach(change => {\n        allChanges.push({\n          change_type: 'property_changed',\n          ...change\n        });\n      });\n    }\n  }\n  \n  return allChanges;\n}\n\n// Executa a compara√ß√£o\nconst changes = findChangesInItems(payload.items, payload.old_items);\n\n// Estrutura a sa√≠da como array de objetos individuais (estilo n8n)\nconst outputArray = [];\n\nchanges.forEach(change => {\n  if (change.change_type === 'property_changed') {\n    outputArray.push({\n      json: {\n        property: change.property,\n        old: change.old_value,\n        new: change.new_value\n      }\n    });\n  }\n});\n\n// Retorna array de mudan√ßas - cada uma como item separado\nreturn outputArray.length > 0 ? outputArray : [{ \n  json: { \n    message: \"Nenhuma mudan√ßa detectada\" \n  } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2240,
        -688
      ],
      "id": "683e1954-167f-4804-9ddb-45d2f004aafa",
      "name": "Filter Baserow Change"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a4395f0-63c6-4c79-b5aa-cf5ebb482c50",
              "leftValue": "={{ $('Workflow Trigger').item.json.body.old_items[0][\"Inbox Id üö®\"] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2064,
        -1280
      ],
      "id": "57488256-be50-4753-8a37-a0d9a19de3fa",
      "name": "Coluna Inbox Id preenchida?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a4395f0-63c6-4c79-b5aa-cf5ebb482c50",
              "leftValue": "={{ $('Workflow Trigger').item.json.body.items[0][\"Inbox Status\"].value }}",
              "rightValue": "active",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2064,
        -1568
      ],
      "id": "9a8c0742-455e-4ddf-a1df-eb1912e53fd4",
      "name": "Coluna Status como active?"
    },
    {
      "parameters": {
        "url": "={{ $('Workflow Trigger').item.json.body.items[0][\"Chatwoot URL\"][0].value }}/api/v1/accounts/{{ $('Workflow Trigger').item.json.body.items[0][\"Chatwoot Account Id\"][0].value }}/inboxes",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Workflow Trigger').item.json.body.items[0][\"User Token\"][0].value }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1040,
        -1440
      ],
      "id": "2623fa1c-6822-478f-95a5-32e3e6cb6499",
      "name": "Obt√©m inboxes",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "90a840d1-ac7f-42fe-a1f9-79bf6c551573",
              "leftValue": "={{ $('Search Inbox Id').item.json.found }}",
              "rightValue": "={{ (typeof $('Filter Baserow Change').item.json.new === 'object') ? $('Workflow Trigger').item.json.body.items[0][\"Inbox Id üö®\"].toNumber() : $('Filter Baserow Change').item.json.new.toNumber() }}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -672,
        -1440
      ],
      "id": "8b65da0d-d8a2-43e2-a005-b6bf3dd6adf4",
      "name": "Existe esse inbox ID?"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "result",
        "key": "={{ $('Workflow Trigger').item.json.body.old_items[0][\"Chatwoot URL\"][0].value.split('//')[1].replace(':','Port').replace(/\\./g, '_').replace(/-/g, '_').replace(/_com_br/g, '_br') }}:acc{{ $('Workflow Trigger').item.json.body.items[0][\"Chatwoot Account Id\"][0].value }}:instanceRow:{{ $('Workflow Trigger').item.json.body.items[0].id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1440,
        -1488
      ],
      "id": "7631fc81-794b-439a-87d0-9ec85ace48ae",
      "name": "Get Cache Lock Inbox Id Change",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Workflow Trigger').item.json.body.old_items[0][\"Chatwoot URL\"][0].value.split('//')[1].replace(':','Port').replace(/\\./g, '_').replace(/-/g, '_').replace(/_com_br/g, '_br') }}:acc{{ $('Workflow Trigger').item.json.body.items[0][\"Chatwoot Account Id\"][0].value }}:instanceRow:{{ $('Workflow Trigger').item.json.body.items[0].id }}",
        "value": "=true",
        "expire": true,
        "ttl": 6
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -256,
        -1312
      ],
      "id": "8d772423-f7d4-4bf8-af44-0256be1a9da8",
      "name": "SET Cache Lock Inbox Id Change 6s",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        64,
        -1312
      ],
      "id": "bf832245-f29b-4ea5-923e-e6f0265b0e6f",
      "name": "Wait 6s",
      "webhookId": "5e7858f0-bd4b-4586-b385-a3beef5b311b"
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": "={{ $('Database Id').item.json.database }}",
        "tableId": "={{ $('Database Id').item.json.field_log_inbox }}",
        "rowId": "={{ $('Workflow Trigger').item.json.body.items[0].id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "={{ $('Database Id').item.json.field_log_inbox }}",
              "fieldValue": "=Status: ‚úÖ As mensagens da inst√¢ncia com o token \"{{ $('Workflow Trigger').item.json.body.items[0][\"Instance Token\"].split('-')[0] }}...\" chegar√£o no Inbox com o ID {{ $('Create a Inbox (Run once!!)').item.json.id }}\n\n√öltimo evento: Inbox ID definido mas n√£o localizado. O inbox {{ $('Create a Inbox (Run once!!)').item.json.id }} foi criado!"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        192,
        -1312
      ],
      "id": "539233cc-4ed8-451c-a80c-cfd5f8db7cc5",
      "name": "Log",
      "credentials": {
        "baserowApi": {
          "id": "XgJZ5iZG1GTSMra1",
          "name": "[yearsinbox@gmail]"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6a4bfa60-ad3a-4ba4-8b1b-99474fb9cebf",
                    "leftValue": "={{ $('Filter Baserow Change').item.json.error }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Payload inv√°lido"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "42f75d1c-0bde-4624-b26e-0da09c305ed4",
                    "leftValue": "={{ $('Filter Baserow Change').item.json.property }}",
                    "rightValue": "Inbox Id",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Inbox ID"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Filter Baserow Change').item.json.property }}",
                    "rightValue": "Inbox Status",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "bdd96b14-8b4a-4ef7-8ed0-ae9ce882ffb9"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "=Inbox Status"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c303fa20-7771-4c85-b180-453a813419c6",
                    "leftValue": "={{ $('Filter Baserow Change').item.json.property }}",
                    "rightValue": "(Instance Name|Instance Token|Instance Url)",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "=Token|Url|Nome"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2064,
        -736
      ],
      "id": "83787c14-6919-4fd7-8a08-bb10f35b072e",
      "name": "Switch3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ba14fb57-76a5-46db-90ac-516be828d418",
              "leftValue": "={{ $('Get Cache Lock Inbox Id Change').item.json.result === null ? false : $('Get Cache Lock Inbox Id Change').item.json.result.parseJson() }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1248,
        -1488
      ],
      "id": "74cafbcd-3845-457c-9449-d56dfbf60910",
      "name": "Locked?"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1056,
        -1648
      ],
      "id": "ec2c6f74-98ad-4dfb-bbb7-8ee1952c230b",
      "name": "Esfria a cuca... (Trash Webhook)"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=api:instance:{{ $('Get InstanceSS Rows').item.json['Instance Token'] }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -912,
        -576
      ],
      "id": "52877f88-15cd-4c33-a395-6c83cee510b7",
      "name": "Delete Instance Key (ItemSS!)",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": "={{ $('Database Id').item.json.database }}",
        "tableId": "={{ $('Database Id').item.json.table_instance_chatwoot_config }}\n",
        "rowId": "={{ $('Workflow Trigger').item.json.body.items[0].id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "={{ $('Database Id').item.json.field_log_inbox }}",
              "fieldValue": "=Status: ‚ùå O Inbox ID \"{{ $('Workflow Trigger').item.json.body.items[0][\"Inbox Id üö®\"] }}\" n√£o receber√° as mensagens desta inst√¢ncia (token \"{{ $('Workflow Trigger').item.json.body.items[0][\"Instance Token\"].split('-')[0] }}...\")\n\n√öltimo evento: Inbox Status definido como \"inactive\"!"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -1632,
        -1312
      ],
      "id": "ec73f440-a444-47f4-9ec9-4953eb7a5d19",
      "name": "Remove this.inboxId from this.key",
      "credentials": {
        "baserowApi": {
          "id": "XgJZ5iZG1GTSMra1",
          "name": "[yearsinbox@gmail]"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "97da2f32-9ad4-4ff9-8b54-6a777cd04187",
              "leftValue": "={{ $('Filter Baserow Change').item.json.new }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1824,
        -1712
      ],
      "id": "38b260ab-082a-46cb-baeb-08752d664e14",
      "name": "New Value = Empty?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "97da2f32-9ad4-4ff9-8b54-6a777cd04187",
              "leftValue": "={{ (typeof $('Filter Baserow Change').item.json.new === 'object') ? ($('Filter Baserow Change').item.json.new ? $('Filter Baserow Change').item.json.new.value : \"inactive\") : $('Filter Baserow Change').item.json.new }}",
              "rightValue": "inactive",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1856,
        -1296
      ],
      "id": "6b5986c9-42b4-4604-bb74-64206e8f1b99",
      "name": "New Value = Inactive?"
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": "={{ $('Database Id').item.json.database }}",
        "tableId": "={{ $('Database Id').item.json.table_instance_chatwoot_config }}\n",
        "rowId": "={{ $('Workflow Trigger').item.json.body.items[0].id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "={{ $('Database Id').item.json.field_log_inbox }}",
              "fieldValue": "=Status: ‚ùå As mensagens desta inst√¢ncia (token \"{{ $('Workflow Trigger').item.json.body.items[0][\"Instance Token\"].split('-')[0] }}...\") n√£o ser√£o enviadas para o Chatwoot!\n\n√öltimo evento: O valor de Inbox ID foi apagado (o valor era \"{{ $('Filter Baserow Change').item.json.old }}\")!"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -1584,
        -1728
      ],
      "id": "ad1f5c26-ce3e-4135-ba97-8391d954031e",
      "name": "Deactivate this.inboxId from this.key",
      "credentials": {
        "baserowApi": {
          "id": "XgJZ5iZG1GTSMra1",
          "name": "[yearsinbox@gmail]"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Workflow Trigger').item.json.body.items[0][\"Chatwoot URL\"][0].value }}/api/v1/accounts/{{ $('Workflow Trigger').item.json.body.items[0][\"Chatwoot Account Id\"][0].value }}/inboxes",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Workflow Trigger').item.json.body.items[0][\"User Token\"][0].value }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"{{ $('Workflow Trigger').item.json.body.old_items[0][\"Instance Name\"] }}\",\n  \"channel\": {\n    \"type\": \"api\",\n    \"webhook_url\": \"https://n8nwebhook.yearsinbox.com/webhook/yib-chatwoot-receptor-TOuazapi-PROD?installation_url={{ $('Workflow Trigger').item.json.body.items[0][\"Chatwoot URL\"][0].value }}\"\n  }  \n}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -432,
        -1312
      ],
      "id": "91e2782c-978a-4d0b-8d2e-42b53f8c46ee",
      "name": "Create a Inbox (Run once!!)",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Workflow Trigger').item.json.body.old_items[0][\"Chatwoot URL\"][0].value.split('//')[1].replace(':','Port').replace(/\\./g, '_').replace(/-/g, '_').replace(/_com_br/g, '_br') }}:acc{{ $('Workflow Trigger').item.json.body.items[0][\"Chatwoot Account Id\"][0].value }}:instanceRow:{{ $('Workflow Trigger').item.json.body.items[0].id }}",
        "value": "=true",
        "expire": true,
        "ttl": 6
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -432,
        -1632
      ],
      "id": "0d39e220-12e4-44af-a47d-f017dcf530ad",
      "name": "SET Cache Lock Inbox Id Change 6s1",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": "={{ $('Database Id').item.json.database }}",
        "tableId": "={{ $('Database Id').item.json.table_instance_chatwoot_config }}",
        "rowId": "={{ $('Workflow Trigger').item.json.body.items[0].id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "={{ $('Database Id').item.json.field_inbox_id }}",
              "fieldValue": "={{ $('Create a Inbox (Run once!!)').item.json.channel_id }}"
            },
            {
              "fieldId": "={{ $('Database Id').item.json.field_log_inbox }}",
              "fieldValue": "=Criando Inbox..."
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -64,
        -1312
      ],
      "id": "c57646cb-850b-43d8-ac2e-783210448c6f",
      "name": "Set new inbox Id & Wait Message",
      "credentials": {
        "baserowApi": {
          "id": "XgJZ5iZG1GTSMra1",
          "name": "[yearsinbox@gmail]"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb2d53c2-58a6-4f7e-84ed-baf92274e68d",
              "name": "inboxId",
              "value": "={{ $('Filter Baserow Change').item.json.new.toNumber() }}",
              "type": "number"
            },
            {
              "id": "5062b3c8-8a51-431a-ac24-8e7afc80237f",
              "name": "inboxStatus",
              "value": "={{ $('Workflow Trigger').item.json.body.items[0][\"Inbox Status\"].value }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1408,
        -1728
      ],
      "id": "644c1d30-5438-4573-88c6-baeb1d8a3ac0",
      "name": "INBOX ID AND SATUS"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb2d53c2-58a6-4f7e-84ed-baf92274e68d",
              "name": "inboxId",
              "value": "={{ $('Workflow Trigger').item.json.body.old_items[0][\"Inbox Id üö®\"].toNumber() }}",
              "type": "number"
            },
            {
              "id": "5062b3c8-8a51-431a-ac24-8e7afc80237f",
              "name": "inboxStatus",
              "value": "={{ $('Filter Baserow Change').item.json.new ? $('Filter Baserow Change').item.json.new.value : \"inactive\" }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1440,
        -1312
      ],
      "id": "0fb0654c-b364-48b1-ba56-8cdb64176b67",
      "name": "INBOX ID AND SATUS1"
    },
    {
      "parameters": {
        "content": "# Inbox Control ______________________ Ativa/Desativa/Cria",
        "height": 80,
        "width": 2912,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2400,
        -1824
      ],
      "typeVersion": 1,
      "id": "26a7d88b-6cac-40a8-96f1-ec2df5d64b12",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "operation": "get",
        "databaseId": "={{ $('Database Id').item.json.database }}",
        "tableId": "={{ $('Database Id').item.json.table_instance_chatwoot_config }}",
        "rowId": "={{ $('Inst√¢ncias a serem editadas').item.json.id }}"
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -1104,
        -576
      ],
      "id": "10b50a8d-c8dc-4960-bbfb-97fdffc35c60",
      "name": "Get InstanceSS Rows",
      "credentials": {
        "baserowApi": {
          "id": "XgJZ5iZG1GTSMra1",
          "name": "[yearsinbox@gmail]"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb2d53c2-58a6-4f7e-84ed-baf92274e68d",
              "name": "inboxId",
              "value": "={{ $('Create a Inbox (Run once!!)').item.json.id }}",
              "type": "number"
            },
            {
              "id": "5062b3c8-8a51-431a-ac24-8e7afc80237f",
              "name": "inboxStatus",
              "value": "={{ $('Workflow Trigger').item.json.body.items[0][\"Inbox Status\"].value }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        320,
        -1312
      ],
      "id": "907c31f0-41b5-4861-8b64-5ed8c242cf23",
      "name": "INBOX ID AND SATUS3"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -720,
        -832
      ],
      "id": "d1901783-9cad-4ad4-b331-af9c799b99bb",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Obt√©m o array de inboxes do payload\nconst inboxes = $('Obt√©m inboxes').item.json.payload;\n\n// Obt√©m o ID para compara√ß√£o\nconst targetId = (typeof $('Filter Baserow Change').item.json.new === 'object') \n  ? Number($('Workflow Trigger').item.json.body.items[0][\"Inbox Id üö®\"]) \n  : Number($('Filter Baserow Change').item.json.new);\n\n// Filtra apenas inboxes do tipo \"Channel::Api\" e procura pelo ID correspondente\nconst foundInbox = inboxes\n  .filter(inbox => inbox.channel_type === \"Channel::Api\")\n  .find(inbox => inbox.id === targetId);\n\n// Retorna o resultado\nif (foundInbox) {\n  return {\n    found: true,\n    id: foundInbox.id,\n    name: foundInbox.name,\n    channel_id: foundInbox.channel_id\n  };\n} else {\n  return {\n    found: false,\n    id: null,\n    name: null,\n    channel_id: null\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -864,
        -1440
      ],
      "id": "3d935a60-2e5e-4b52-a862-964c175ed149",
      "name": "Search Inbox Id"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb2d53c2-58a6-4f7e-84ed-baf92274e68d",
              "name": "inboxId",
              "value": "={{ $('Workflow Trigger').item.json.body.items[0][\"Inbox Id üö®\"].toNumber() }}",
              "type": "number"
            },
            {
              "id": "5062b3c8-8a51-431a-ac24-8e7afc80237f",
              "name": "inboxStatus",
              "value": "={{ $('Workflow Trigger').item.json.body.items[0][\"Inbox Status\"].value }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -80,
        -1632
      ],
      "id": "2767fa64-5296-436c-95cd-3f542d6ad79b",
      "name": "INBOX ID AND SATUS4"
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": "={{ $('Database Id').item.json.database }}",
        "tableId": "={{ $('Database Id').item.json.table_instance_chatwoot_config }}",
        "rowId": "={{ $('Workflow Trigger').item.json.body.items[0].id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "={{ $('Database Id').item.json.field_log_inbox }}",
              "fieldValue": "=Status: ‚úÖ As mensagens desta inst√¢ncia (token \"{{ $('Workflow Trigger').item.json.body.items[0][\"Instance Token\"].split('-')[0] }}...\") chegar√£o no Inbox com o ID \"{{ (typeof $('Filter Baserow Change').item.json.new === 'object') ? $('Workflow Trigger').item.json.body.items[0]['Inbox Id üö®'] : $('Filter Baserow Change').item.json.new }}\"!\n\n√öltimo evento: {{ $('Filter Baserow Change').item.json.property.includes('Inbox Status') ? 'Inbox Status alterado para \"active\"!' : 'Inbox ID definido manualmente, localizado e selecionado com sucesso!' }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -256,
        -1632
      ],
      "id": "03f65396-22df-46aa-94cd-12fcab7124f0",
      "name": "Update And Log1",
      "credentials": {
        "baserowApi": {
          "id": "XgJZ5iZG1GTSMra1",
          "name": "[yearsinbox@gmail]"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": "={{ $('Database Id').item.json.database }}",
        "tableId": "={{ $('Database Id').item.json.table_instance_chatwoot_config }}\n",
        "rowId": "={{ $('Workflow Trigger').item.json.body.items[0].id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "={{ $('Database Id').item.json.field_log_inbox }}",
              "fieldValue": "=Status: ‚ùå As mensagens da inst√¢ncia (token \"{{ $('Workflow Trigger').item.json.body.items[0][\"Instance Token\"].split('-')[0] }}...\") n√£o ser√£o enviadas para o Chatwoot!\n\n√öltimo evento: Inbox Status definido como ativo mas Inbox Id n√£o preenchido!"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -2304,
        -1280
      ],
      "id": "0852a86e-3212-420f-8e48-19b40737d113",
      "name": "Status puro, sem ID, n√£o significa nada!",
      "credentials": {
        "baserowApi": {
          "id": "XgJZ5iZG1GTSMra1",
          "name": "[yearsinbox@gmail]"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": "={{ $('Database Id').item.json.database }}",
        "tableId": "={{ $('Database Id').item.json.table_instance_chatwoot_config }}\n",
        "rowId": "={{ $('Workflow Trigger').item.json.body.items[0].id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "={{ $('Database Id').item.json.field_log_inbox }}",
              "fieldValue": "=Status: ‚ùå As mensagens da inst√¢ncia (token \"{{ $('Workflow Trigger').item.json.body.items[0][\"Instance Token\"].split('-')[0] }}...\") n√£o ser√£o enviadas para o Chatwoot!\n\n√öltimo evento: Inbox Id alterado mas Inbox Status inativo!"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -2304,
        -1568
      ],
      "id": "10e20c5b-22f9-4481-b5db-7cdf8814b980",
      "name": "Coluna status inactive fazemos nada!",
      "credentials": {
        "baserowApi": {
          "id": "XgJZ5iZG1GTSMra1",
          "name": "[yearsinbox@gmail]"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $('Merge - Instance Chatwoot Data').item.json.installationUrl }}/api/v1/accounts/{{ $('Merge - Instance Chatwoot Data').item.json.accountId }}/contacts/{{ $('Nml - Contact id').isExecuted ? $('Nml - Contact id').item.json.id : $('Mrg - contactCvs data').item.json.id }}/conversations",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Merge - Instance Chatwoot Data').item.json.userToken }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2576,
        -1088
      ],
      "id": "c59dc818-74ba-452a-bd2c-05467e16bfac",
      "name": "Get contact conversations",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput",
      "notes": "{{ $('Normalized Instance Chatwoot Data').item.json.installationUrl }}/api/v1/accounts/{{ $('Normalized Instance Chatwoot Data').item.json.accountId }}/contacts/{{ $('Contact Data').item.json.id }}/conversations"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Merge - Instance Chatwoot Data').item.json.installationUrl }}/api/v1/accounts/{{ $('Merge - Instance Chatwoot Data').item.json.accountId }}/conversations/{{ $('Mrg - contactCvs data').item.json.cvsId }}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Merge - Instance Chatwoot Data').item.json.userToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    {{\n      (() => {\n          const data = $('Nml - Webhook Data').item.json;\n          let content;\n          \n          // Verificar se precisa adicionar prefixo para mensagem citada indispon√≠vel\n          const isExecuted = $('Get messageId by instanzeId').isExecuted;\n          const cwMessageId = isExecuted ? $('Get messageId by instanzeId').item.json.cw_message_id : null;\n          const stanzaId = isExecuted ? $('Get messageId by instanzeId').item.json.stanza_id : null;\n          const shouldAddPrefix = isExecuted && (cwMessageId === undefined || stanzaId === undefined);\n          \n          if (data.deleted) {\n              content = \"`üëÜüèº‚ùå Deletada no aplicativo!`\";\n          } else if (data.edited) {\n              content = '`üëÜüèº Mensagem editada:`\\n\\n' + data.text;\n          } else if (data.reaction) {\n              content = '`' + data.text + '`';\n          }\n          else {\n              content = data.text;\n          }\n          \n          // Adicionar prefixo se necess√°rio\n          if (shouldAddPrefix) {\n              content = \"`Mensagem citada indispon√≠vel`\\n\\n\" + content;\n          }\n          \n          return '\"content\": ' + content.toJsonString() + ',';\n      })()\n    }}\n    \"message_type\": \"{{ $('Nml - Webhook Data').item.json.cwMessageType }}\",\n    \"source_id\": \"{{ $('Nml - Webhook Data').item.json.messageId ?? `MID:DEL${Math.random().toString(36).substring(2, 12)}` }}\"\n    {{\n        (() => {\n            const isExecuted = $('Get messageId by instanzeId').isExecuted;\n            if (!isExecuted) return '';\n            \n            const cwMessageId = $('Get messageId by instanzeId').item.json.cw_message_id;\n            const stanzaId = $('Get messageId by instanzeId').item.json.stanza_id;\n            \n            // S√≥ exibir content_attributes se ambos os valores existem e n√£o s√£o undefined\n            if (cwMessageId !== undefined && stanzaId !== undefined) {\n                return ',\"content_attributes\": {' +\n                '\"in_reply_to\": ' + cwMessageId + ',' +\n                '\"in_reply_to_external_id\": \"' + stanzaId + '\"' +\n                '}';\n            }\n            \n            return '';\n        })()\n    }}\n    {{\n      ($('Workflow Trigger').item.json.switchProcessor.eventType.includes(\"SYSTEM_MESSAGE\")\n        ? `,\"private\": true`\n        : ''\n      )\n    }}\n}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2848,
        -48
      ],
      "id": "d399eb1a-1772-4f18-8474-50d09199db5a",
      "name": "Create message",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ $('Merge - Instance Chatwoot Data').item.json.installationUrl }}/api/v1/accounts/{{ $('Merge - Instance Chatwoot Data').item.json.accountId }}/conversations/{{ $('Mrg - contactCvs data').item.json.cvsId }}/messages/{{ $('Mrg - Create message (cmnt)').item.json.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Merge - Instance Chatwoot Data').item.json.userToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{ \"status\": \"delivered\"}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4176,
        -128
      ],
      "id": "7c2b1c9a-1bfa-4fa0-bf17-15c68b1dd226",
      "name": "Message status - Delivered1",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ $('Merge - Instance Chatwoot Data').item.json.installationUrl }}/api/v1/accounts/{{ $('Merge - Instance Chatwoot Data').item.json.accountId }}/conversations/{{ $('Create conversation').item.json.id }}/messages/{{ $('Create conversation').item.json.messages[0].id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Merge - Instance Chatwoot Data').item.json.userToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{ \"status\": \"delivered\"}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4688,
        -1088
      ],
      "id": "07927c9d-583d-4d79-b566-49cbfcbb3164",
      "name": "Message status - Delivered",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $('Get Instance Chatwoot Data').item.json.data }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -928,
        16
      ],
      "id": "c44ebd8a-d95a-42c0-9062-7621e0782a3d",
      "name": "Nml - Instance Chatwoot Cached Data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bb0d40ca-ad03-408a-adda-a43695a923f6",
              "name": "instanceToken",
              "value": "={{ $('Get Instance&Chatwoot Data').item.json[\"Instance Token\"] }}",
              "type": "string"
            },
            {
              "id": "b273f70f-82ac-44d8-a0c6-fcd6ddf5910d",
              "name": "installationUrl",
              "value": "={{ $('Get Instance&Chatwoot Data').item.json[\"Chatwoot URL\"][0].value }}",
              "type": "string"
            },
            {
              "id": "813ddae0-512a-435f-b492-fac784684c7f",
              "name": "accountName",
              "value": "={{ $('Get Instance&Chatwoot Data').item.json[\"Chatwoot Account (SET!)\"][0].value }}",
              "type": "string"
            },
            {
              "id": "f0bdc8eb-48b8-496e-9336-e4a9089f19d1",
              "name": "accountId",
              "value": "={{ $('Get Instance&Chatwoot Data').item.json[\"Chatwoot Account Id\"][0].value }}",
              "type": "string"
            },
            {
              "id": "d83081dd-c0d3-499c-ac57-90616b3b1768",
              "name": "userName",
              "value": "={{ $('Get Instance&Chatwoot Data').item.json[\"Chatwoot User Name\"][0].value }}",
              "type": "string"
            },
            {
              "id": "0ddcc2e5-c741-4370-a455-27dc6ede53bb",
              "name": "userToken",
              "value": "={{ $('Get Instance&Chatwoot Data').item.json[\"User Token\"][0].value }}",
              "type": "string"
            },
            {
              "id": "c05e1c5e-1f42-4e45-a796-a6780a915fcf",
              "name": "inboxId",
              "value": "={{ $('Get Instance&Chatwoot Data').item.json[\"Inbox Id üö®\"] }}",
              "type": "number"
            },
            {
              "id": "f74aed3f-98ce-46ef-b32a-fe42f342f558",
              "name": "inboxStatus",
              "value": "={{ $('Get Instance&Chatwoot Data').item.json[\"Inbox Status\"].value }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1120,
        -240
      ],
      "id": "04250e4d-9897-499c-85ca-22a05c499103",
      "name": "Nml - Instance Chatwoot Data1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -672,
        16
      ],
      "id": "ef5f7bcc-a5b7-4571-bedd-fdc12b513da9",
      "name": "Merge - Instance Chatwoot Data"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Nml - Webhook Data').item.json.messageId }}",
        "value": "={\"id\":{{ $('Mrg - Create message (cmnt)').item.json.id }},\"status\":\"delivered\",\"cvsId\":{{ $('Mrg - contactCvs data').item.json.cvsId }}}",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4368,
        -128
      ],
      "id": "808f9bad-45a7-44ab-a5f8-e68246ab091f",
      "name": "Cache Message As Delivered1",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const apiBody = $('Workflow Trigger').item.json.body;\nconst switchProcessor = $('Workflow Trigger').item.json.switchProcessor;\nconst payload = {};\n\n// Fun√ß√£o para processar vCard e extrair informa√ß√µes de contato\nfunction processVCard(vCardString) {\n    const vCardData = vCardString.split('\\n');\n    const contactInfo = {};\n    \n    vCardData.forEach((line) => {\n        const [key, value] = line.split(':');\n        if (key && value) {\n            contactInfo[key] = value;\n        }\n    });\n    \n    return contactInfo;\n}\n\n// Fun√ß√£o para formatar um contato individual\nfunction formatSingleContact(contactInfo, displayName) {\n    const name = displayName || contactInfo['FN'];\n    let formattedContact = `üìû *${name}*\\n`;\n    \n    // Coletar todos os n√∫meros de telefone\n    const phoneNumbers = [];\n    Object.keys(contactInfo).forEach((key) => {\n        if (key.startsWith('item') && key.includes('TEL')) {\n            phoneNumbers.push(contactInfo[key]);\n        } else if (key.includes('TEL') && !key.startsWith('item')) {\n            phoneNumbers.push(contactInfo[key]);\n        }\n    });\n    \n    // Formata√ß√£o diferente para 1 ou m√∫ltiplos n√∫meros\n    if (phoneNumbers.length === 1) {\n        formattedContact += `‚îî ${phoneNumbers[0]}`;\n    } else if (phoneNumbers.length > 1) {\n        phoneNumbers.forEach((phone, index) => {\n            const isLast = index === phoneNumbers.length - 1;\n            const prefix = isLast ? '‚îî' : '‚îú';\n            formattedContact += `${prefix} ${phone}`;\n            if (!isLast) formattedContact += '\\n';\n        });\n    }\n    \n    return formattedContact;\n}\n\n/*====================================\nCOMMON FISRT PROPERTY\n====================================*/\npayload.eventType = apiBody.EventType;\n\n/*====================================\nPROCESSA MESSAGE_UPDATEDS\n====================================*/\nif (payload.eventType === 'messages_update') {\n  payload.type = apiBody.type;\n  \n  /*============\n  DELETADAS: n√£o tratamos como updated... Convertemos para \"messages\" seguindo o caminho normal para fazermos a \"Cita√ß√£o\" de del√ß√£o.\n  ============*/\n  if (apiBody.type === 'DeletedMessage') { // Poderia ser apiBody.event.Type === 'Deleted', os dois s√£o iguais!\n    payload.eventType = 'messages';\n    payload.cwMessageType = apiBody.event.IsFromMe ? \"outgoing\" : \"incoming\";\n    payload.contentType = 'deletion'; //Estou criando esse type para padronizar\n    payload.deleted = true; \n    payload.deletedId = apiBody.event.MessageIDs[0]; //Como √© updatedd vem ddentro de IDs no plural, mas vem apenas uma por vez (√ìTIMO!)!\n  }\n\n  /*============\n  STATUS UPDATE: Todos os eventos que recebemos aqui de update s√£o atualiza√ß√£o de status (se n√£o for o deleted de cima, obviamente)\n  ============*/\n  // Adiciona o status da mensagem\n  if (apiBody.state) { //Todos os eventos de update tem essa propriedade, exceto o event.Type: \"retry\"! Que eu vou cortar logo no Router.\n    switch(apiBody.state) {\n      case \"Delivered\":\n        payload.status = \"sent\";\n        break;\n      case \"Read\":\n        payload.status = \"read\";\n        break;\n      default:\n        payload.status = \"Status desconhecido\";\n    }\n    payload.messageIds = apiBody.event.MessageIDs?.map(id => `MID:${id}`) || []; //Para todos os IDS adicionamos nosso prefixo\n  }\n  \n  payload.contactData = {\n    chatId: apiBody.event.Chat,\n    phoneNumber: apiBody.event.Chat?.split('@')[0] || null\n  };\n\n  \n/*====================================\nPROCESSA EVENTO \"messages\" (s√≥ mandamos para c√° esses messages e messages_update, por isso um simples else e n√£o case)\n====================================*/\n} else { \n  const apiBodyMessage = apiBody.message;\n  // N√£o precisamos: if (apiBodyMessage) { ‚Üê Sempre teremos body message!\n  payload.wasSentByApi = apiBodyMessage.wasSentByApi;\n  payload.cwMessageType = apiBodyMessage.fromMe ? \"outgoing\" : \"incoming\";\n\n  //Amtes do bug de normaliza√ß√£o eu usava essa simplificada.\n  // BUG: A Uazapi em alguns casos de mensagens de m√≠dia (QR code que enviei pela Evo pelo Typebot) simplesmente mandou a mensagem de m√≠dia com o type \"text\", mesmo tendo conte√∫do de imagem (mediaType: \"image\")! Ent√£o t√¥ fazenod agora uma verifica√ß√£o direta dessa propriedade como fallback.\n  //let apiBodyMessageType = apiBodyMessage.messageType === 'ExtendedTextMessage' \n    //? 'text' \n    //: apiBodyMessage.type; //text/reaction/media\n  //payload.contentType = apiBodyMessageType;\n\n  let apiBodyMessageType;\n  if (apiBodyMessage.messageType === 'ExtendedTextMessage') { //Nesse caso a Uazapi PARA ALGUNS payloads n√£o normaliza o apiBodyMessage.type como sendo \"text\", talvez puramente por bug (como no caso do anuncio de facebook vs instagram), ou por ter cen√°rios complexos, mas... EU vou normalizar como texto normal visto que at√© agora s√≥ lidei com cen√°rios onde, apesar de ser Extended (mensagem de texto normal que vem como Extented por algum motivo, mensagem de an√∫ncio), recebemos normalizado na propriedade text o conte√∫do.\n    apiBodyMessageType = 'text';\n  } else if (apiBodyMessage.mediaType && apiBodyMessage.mediaType !== '') {\n    apiBodyMessageType = 'media';\n  } else {\n    apiBodyMessageType = apiBodyMessage.type; // text/reaction/media\n  }\n  payload.contentType = apiBodyMessageType;\n\n  \n  /*============\n  TODOS DAS PROPRIEDADES DE TODAS AS MENSAGENS QUE IMPLICAM EM MARCA√á√ÉO (CONSULTA DE stanzaId).\n  ============*/\n  if (apiBodyMessage.edited) { // Se tem conte√∫do\n    payload.edited = !!apiBodyMessage.edited; // Convertemos para booleano\n    payload.editedId = apiBodyMessage.edited // Propriedade extra para o valor\n  }\n  if (apiBodyMessage.reaction) {\n    payload.reaction = !!apiBodyMessage.reaction\n    payload.reactionId = apiBodyMessage.reaction\n  }\n  if (apiBodyMessage.quoted) {\n    payload.quoted = !!apiBodyMessage.quoted;\n    payload.quotedId = apiBodyMessage.quoted; // Est√° vindo normalizado aqui, mas a propriedade \"oficial\" seria essa: content?.contextInfo?.stanzaID\n    payload.contextInfo = apiBodyMessage.content?.contextInfo || {} // Dados \"extras\" j√° que o que nos inporta √© o quoted id que pegamos acima.\n  }\n\n  payload.source = apiBodyMessage.source;\n  payload.messageId = apiBodyMessage.messageid ? `MID:${apiBodyMessage.messageid}` : null; //null para system messages (minha constraint para corrigir duplicadas na evo n√£o funciona com ''.)\n  \n  // Dados de Contato\n  payload.contactData = {\n    chatId: apiBodyMessage.chatid,\n    lid: apiBodyMessage.sender_lid,\n    phoneNumber: apiBodyMessage.chatid?.split('@')[0] || null,\n    senderName: apiBodyMessage.senderName || \"Contato sem nome\"\n  };\n\n  /*============\n  MESSAGE TYPE TEXT (Conversation/Extended)/REACTION\n  ============*/\n  if (apiBodyMessageType === 'text' || apiBodyMessageType === 'reaction') {\n    payload.text = apiBodyMessage.text;\n  }\n  \n  /*============\n  MESSAGE TYPE AD REPLY (RESPOSTA DE AN√öNCIO)\n  ============*/\n  // Verifica se a mensagem √© uma resposta a um an√∫ncio pela exist√™ncia do objeto externalAdReply\n  if (apiBodyMessage.content?.contextInfo?.externalAdReply) {\n    const contextInfo = apiBodyMessage.content.contextInfo;\n    const adReply = contextInfo.externalAdReply;\n  \n    // Extrai as informa√ß√µes relevantes\n    const clientMessage = apiBodyMessage.text;\n    const adTitle = adReply.title;\n    const adBody = adReply.body;\n    const adUrl = adReply.sourceURL;\n  \n    // --- L√ìGICA DE ORIGEM ATUALIZADA ---\n    // 1. Define a plataforma [Facebook/Instagram]\n    const platformApp = (contextInfo.entryPointConversionApp || adReply.sourceApp || 'Desconhecida').replace(/^\\w/, c => c.toUpperCase());\n    \n    // 2. Extrai os detalhes ricos para o colchete [sourceType - entryPointConversationSource]\n    const adSourceType = adReply.sourceType || 'empty'; // ex: 'ad' ou 'post'\n    const conversionSource = contextInfo.entryPointConversionSource || 'empty'; // ex: 'ctwa_ad' ou 'post_cta'\n  \n    // Monta a mensagem final com a nova estrutura de origem\n    let formattedText = `üéØ **NOVO LEAD - META ADS**\\n`;\n    formattedText += `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\\n`;\n    formattedText += `‚îÇ üìç *Origem:* ${platformApp}\\n`;\n    formattedText += `‚îÇ *Src Type:* ${adSourceType}\\n`;\n    formattedText += `‚îÇ *Src:* ${conversionSource}\\n`;\n    formattedText += `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\\n`;\n  \n    formattedText += `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\\n`;\n    formattedText += `‚îÇ *Ads Name:* **${adTitle}**\\n`;\n    formattedText += `‚îÇ *Ads Link:* ${adUrl}\\n`;\n    formattedText += `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\\n`;\n\n    formattedText += `\\n**Texto do An√∫ncio:**\\n`;\n    if (adBody && adBody.trim()) {\n      \n      const formattedAdBody = adBody.split('\\n').map(line => `> ${line}`).join('\\n');\n      formattedText += `${formattedAdBody}\\n`;\n    } else {\n      formattedText += `> An√∫ncio sem texto\\n`;\n    }\n    \n    //formattedText += `\\n‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢\\n`;\n    formattedText += `\\nüí¨ **Mensagem do Lead:** \\n${clientMessage}`;\n  \n    payload.text = formattedText.trim();\n    payload.contactData.senderName = `Sem nome - Meta Ads [${platformApp}]`\n    //payload.contentType = 'text'; // Garantimos que ser√° tratado como uma mensagem de texto\n  }\n\n  /*============\n  MESSAGE TYPE TEMPLATE (MENSAGEM INTERATIVA COM BOT√ïES)\n  ============*/\n  if (apiBodyMessage.messageType === 'TemplateMessage') {\n    const template = apiBodyMessage.content.hydratedTemplate;\n    const templateContent = template.hydratedContentText || '';\n    const buttons = template.hydratedButtons || [];\n    \n    let formattedText = 'üìã **MENSAGEM INTERATIVA**\\n';\n    formattedText += '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\\n';\n    formattedText += '‚îÇ ü§ñ *Tipo:* Template Message\\n';\n    formattedText += `‚îÇ üÜî *ID:* ${apiBodyMessage.content.templateID}\\n`;\n    formattedText += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\\n\\n';\n    \n    // Conte√∫do principal da mensagem\n    if (templateContent.trim()) {\n      formattedText += 'üìÑ **Conte√∫do:**\\n';\n      const formattedContent = templateContent.split('\\n').map(line => `  ${line}`).join('\\n');\n      formattedText += `${formattedContent}\\n\\n`;\n    }\n    \n    // Bot√µes dispon√≠veis\n    if (buttons.length > 0) {\n      formattedText += 'üîò **Op√ß√µes Dispon√≠veis:**\\n';\n      buttons.forEach((button, index) => {\n        const isLast = index === buttons.length - 1;\n        const prefix = isLast ? '‚îî' : '‚îú';\n        const hydratedButton = button.HydratedButton;\n        const buttonNumber = index + 1;\n        \n        // Quick Reply Button (bot√£o de resposta r√°pida)\n        if (hydratedButton?.QuickReplyButton) {\n          const quickReply = hydratedButton.QuickReplyButton;\n          formattedText += `${prefix} **Bot√£o ${buttonNumber}** üí¨ ${quickReply.displayText}\\n`;\n          if (quickReply.ID && quickReply.ID !== quickReply.displayText) {\n            formattedText += `${isLast ? '  ' : '‚îÇ '}    ‚Ü≥ ID: ${quickReply.ID}\\n`;\n          }\n        }\n        \n        // URL Button (bot√£o de link/site)\n        else if (hydratedButton?.UrlButton) {\n          const urlButton = hydratedButton.UrlButton;\n          formattedText += `${prefix} **Bot√£o ${buttonNumber}** üåê ${urlButton.displayText}\\n`;\n          formattedText += `${isLast ? '  ' : '‚îÇ '}    ‚Ü≥ ${urlButton.URL}\\n`;\n        }\n        \n        // Call Button (bot√£o de chamada)\n        else if (hydratedButton?.CallButton) {\n          const callButton = hydratedButton.CallButton;\n          formattedText += `${prefix} **Bot√£o ${buttonNumber}** üìû ${callButton.displayText}\\n`;\n          formattedText += `${isLast ? '  ' : '‚îÇ '}    ‚Ü≥ ${callButton.phoneNumber}\\n`;\n        }\n        \n        // Copy Code Button (bot√£o de copiar c√≥digo)\n        else if (hydratedButton?.CopyCodeButton) {\n          const codeButton = hydratedButton.CopyCodeButton;\n          formattedText += `${prefix} **Bot√£o ${buttonNumber}** üìã ${codeButton.displayText}\\n`;\n          formattedText += `${isLast ? '  ' : '‚îÇ '}    ‚Ü≥ C√≥digo: ${codeButton.copyCode}\\n`;\n        }\n        \n        // MPM/Flow Action Button (bot√µes de a√ß√£o/fluxo)\n        else if (hydratedButton?.FlowActionButton) {\n          const flowButton = hydratedButton.FlowActionButton;\n          formattedText += `${prefix} **Bot√£o ${buttonNumber}** ‚ö° ${flowButton.displayText}\\n`;\n          if (flowButton.flowToken) {\n            formattedText += `${isLast ? '  ' : '‚îÇ '}    ‚Ü≥ Flow: ${flowButton.flowToken}\\n`;\n          }\n        }\n        \n        // Bot√£o desconhecido ou n√£o implementado\n        else {\n          const buttonText = Object.keys(hydratedButton)[0] || `Tipo desconhecido`;\n          formattedText += `${prefix} **Bot√£o ${buttonNumber}** ‚ùì ${buttonText} (tipo n√£o reconhecido)\\n`;\n        }\n      });\n    }\n    \n    payload.text = formattedText.trim();\n    payload.contentType = 'text'; // Convertemos para texto para o Chatwoot\n  }\n  \n  /*============\n  MESSAGE TYPE VCARD (CONTATO √öNICO)\n  ============*/\n  if (apiBodyMessage.mediaType === 'vcard') {\n    const contactInfo = processVCard(apiBodyMessage.content.vcard);\n    payload.text = formatSingleContact(contactInfo, apiBodyMessage.content.displayName);\n    payload.contentType = 'text'; // Convertemos para texto para o Chatwoot\n  }\n\n  /*============\n  MESSAGE TYPE CONTACT_ARRAY (M√öLTIPLOS CONTATOS)\n  ============*/\n  if (apiBodyMessage.mediaType === 'contact_array') {\n    const contactCount = apiBodyMessage.content.contacts.length;\n    const formattedContacts = apiBodyMessage.content.contacts.map((contact) => {\n        const contactInfo = processVCard(contact.vcard);\n        return formatSingleContact(contactInfo, contact.displayName);\n    });\n    \n    const header = `üë• *${contactCount} ${contactCount === 1 ? 'Contato' : 'Contatos'} Compartilhado${contactCount === 1 ? '' : 's'}*\\n\\n`;\n    const separator = '\\n\\n‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢\\n\\n';\n    payload.text = header + formattedContacts.join(separator);\n    payload.contentType = 'text'; // Convertemos para texto para o Chatwoot\n  }\n\n  /*============\n  MESSAGE TYPE LOCATION / LIVE LOCATION\n  ============*/\n  if (apiBodyMessage.mediaType === 'location' || apiBodyMessage.mediaType === 'livelocation') {\n    const latitude = apiBodyMessage.content.degreesLatitude;\n    const longitude = apiBodyMessage.content.degreesLongitude;\n  \n    // VERIFICA SE √â LOCALIZA√á√ÉO EM TEMPO REAL PARA MUDAR O T√çTULO\n    const isLive = apiBodyMessage.mediaType === 'livelocation';\n    const title = isLive \n      ? 'üìç *Localiza√ß√£o em Tempo Real*' \n      : 'üìç *Localiza√ß√£o Compartilhada*';\n  \n    // Construindo o link do Google Maps que funciona universalmente\n    const mapsLink = `http://googleusercontent.com/maps/google.com/1{latitude},${longitude}`;\n    \n    // Formatando o texto da mensagem de forma clara e amig√°vel\n    let formattedText = `${title}\\n\\n`; // Usa o t√≠tulo din√¢mico\n    formattedText += `*Latitude:* ${latitude}\\n`;\n    formattedText += `*Longitude:* ${longitude}\\n\\n`;\n    formattedText += `üó∫Ô∏è *Ver no mapa:*\\n${mapsLink}`;\n    \n    payload.text = formattedText;\n    payload.contentType = 'text'; // Convertemos para texto para ser exibido corretamente\n  }\n  \n  /*============\n  MESSAGE TYPE MEDIA\n  ============*/\n  if (apiBodyMessageType === 'media' && !['vcard', 'contact_array'].includes(apiBodyMessage.mediaType)) { //A nega√ß√£o √© pra n√£o entrar aqui mensagem de contato que o Whatsapp considera m√≠dia mas n√≥s tratamos como texto.\n    payload.content = {\n      mediaType: apiBodyMessage.mediaType,\n      messageType: apiBodyMessage.messageType,\n      mimeType: apiBodyMessage.content.mimetype,\n      url: apiBodyMessage.content.URL,\n      caption: apiBodyMessage.content.caption\n    };\n  }\n\n  payload.idWithOwner = apiBodyMessage.id; //Common\n}\n\n/*====================================\nCOMMON LATEST PROPERTIES\n====================================*/\nif (apiBody.owner) { // Indica quem gerou o evento. Vai ser meu pr√≥prio n√∫emero em fromMe ou o do cliente. \n  payload.owner = apiBody.owner\n}\n\npayload.isGroup = apiBody.event?.IsGroup || false;\n\nif (switchProcessor) {\n  payload.switchProcessor = switchProcessor.eventType;\n}\n\nreturn payload;"
      },
      "name": "Nml - Webhook Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        112,
        16
      ],
      "alwaysOutputData": true,
      "id": "8ebcef27-1e23-4cf5-ba5a-03bb059d8a61"
    },
    {
      "parameters": {
        "url": "={{ $('Uazapi - Generate media Link').item.json.fileURL }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3040,
        512
      ],
      "id": "6f2ebd62-6b92-4b8d-839e-1f77ee9a8043",
      "name": "Get Binary File"
    },
    {
      "parameters": {
        "jsCode": "// Importa o cliente Redis\nconst { createClient } = require('redis');\n\n// --- Configura√ß√µes ---\nconst webhookData = $('Nml - Webhook Data').item.json;\nconst chatwootConfig = $('Merge - Instance Chatwoot Data').item.json;\n\nconst messageIds = webhookData.messageIds;\nconst newStatus = webhookData.status;\nconst TTL_SECONDS = 86400;\n\n// Configura√ß√µes de retentativa para a MENSAGEM PRINCIPAL\nconst RETRY_ATTEMPTS = 20;\nconst RETRY_DELAYS_MS = {\n    image: 500,\n    audio: 500,\n\tptt: 500,\n    document: 1000,\n\tvideo: 600,\n\tdefault: 250 \n};\n\n// NOVIDADE: Configura√ß√µes de retentativa para a busca do TIPO da mensagem\nconst TYPE_CHECK_RETRY_ATTEMPTS = 6; // Menos tentativas, pois deve ser mais r√°pido\nconst TYPE_CHECK_RETRY_DELAY_MS = 350; // Um delay curto e fixo para a busca do tipo\n\n// --- Conex√£o com o Redis ---\nconst client = createClient({\n\tsocket: {\n\t\thost: 'redis',\n\t\tport: 6379\n\t},\n\tdatabase: 10\n});\nclient.on('error', (err) => console.log('Redis Client Error', err));\nawait client.connect();\n\n// --- L√≥gica Principal ---\nconst processedResults = [];\nconst summaryLines = [];\nconst typeCheckLog = {}; \nconst baseUrlPattern = `${chatwootConfig.installationUrl}/api/v1/accounts/${chatwootConfig.accountId}/conversations/{cvsId}/messages/{msgId}`; //Apenas string para debug.\n\n// Itera sobre o array de messageIds\nfor (const messageId of messageIds) {\n\tlet cachedMessageRaw = null;\n\tlet cachedMessage = null;\n    let messageType = null;\n\n\t// ETAPA 1: Buscar o TIPO da mensagem com seu pr√≥prio loop de retentativa\n\tconst typeKey = `${messageId}:TYPE`;\n    for (let i = 0; i < TYPE_CHECK_RETRY_ATTEMPTS; i++) {\n        messageType = await client.get(typeKey);\n        if (messageType) break; // Se encontrou, sai do loop.\n\n        // Se n√£o encontrou, espera um pouco antes da pr√≥xima tentativa\n        if (i < TYPE_CHECK_RETRY_ATTEMPTS - 1) {\n            await new Promise(resolve => setTimeout(resolve, TYPE_CHECK_RETRY_DELAY_MS));\n        }\n    }\n    \n    // Registra o resultado final da busca pelo tipo (seja ele qual for)\n    typeCheckLog[typeKey] = messageType;\n\n\t// ETAPA 2: Determinar o delay de retentativa para a mensagem principal\n\tconst retryDelay = RETRY_DELAYS_MS[messageType] || RETRY_DELAYS_MS.default;\n\n\t// ETAPA 3: Tentar buscar o objeto principal da mensagem\n\tfor (let i = 0; i < RETRY_ATTEMPTS; i++) {\n\t\tcachedMessageRaw = await client.get(messageId);\n\t\tif (cachedMessageRaw) break;\n\t\t\n\t\tif (i < RETRY_ATTEMPTS - 1) {\n\t\t\tawait new Promise(resolve => setTimeout(resolve, retryDelay));\n\t\t}\n\t}\n\n\t// ETAPA 4: Prosseguir com o processamento normal da mensagem...\n\tif (!cachedMessageRaw) {\n\t\tconst errorMsg = `N√£o encontrado no cache ap√≥s ${RETRY_ATTEMPTS} tentativas (delay: ${retryDelay}ms/tipo: ${messageType || 'n√£o def.'}).`;\n\t\tprocessedResults.push({ messageId, status: 'error', error: errorMsg });\n\t\tsummaryLines.push(`${messageId}: Falha (Cache)`);\n\t\tcontinue;\n\t}\n\n\ttry {\n\t\tconst cleanedJsonString = cachedMessageRaw.replace(/\\\\/g, '');\n\t\tcachedMessage = JSON.parse(cleanedJsonString);\n\t} catch (e) {\n\t\tconst errorMsg = `Falha ao parsear JSON do Redis: ${e.message}`;\n\t\tprocessedResults.push({ messageId, status: 'error', error: errorMsg, rawValue: cachedMessageRaw });\n\t\tsummaryLines.push(`${messageId}: Falha (JSON)`);\n\t\tcontinue;\n\t}\n\n\t// Valida√ß√µes\n\tif (!cachedMessage.id || !cachedMessage.cvsId) {\n\t\tconst errorMsg = \"Dados do cache incompletos. 'id' ou 'cvsId' n√£o encontrados.\";\n\t\tprocessedResults.push({ messageId, status: 'error', error: errorMsg, cachedMessage });\n\t\tsummaryLines.push(`${messageId}: Falha (Dados incompletos)`);\n\t\tcontinue;\n\t}\n\n\tif (cachedMessage.status === newStatus) {\n\t\tconst infoMsg = `Evento \"${newStatus}\" duplicado. Nenhuma a√ß√£o tomada.`;\n\t\tprocessedResults.push({ messageId, status: 'duplicate', info: infoMsg });\n\t\tsummaryLines.push(`${messageId}: Duplicado`);\n\t\tcontinue;\n\t}\n\n\t// NOVO: Prote√ß√£o para n√£o atualizar mensagens que j√° est√£o com status \"read\"\n\tif (cachedMessage.status === 'read') {\n\t\tconst infoMsg = `Mensagem j√° est√° com status \"read\". Atualiza√ß√£o bloqueada para evitar regress√£o.`;\n\t\tprocessedResults.push({ messageId, status: 'blocked', info: infoMsg });\n\t\tsummaryLines.push(`${messageId}: Bloqueado (read)`);\n\t\tcontinue;\n\t}\n\n\t// ETAPA 5: Atualizar a API do Chatwoot\n\tconst url = `${chatwootConfig.installationUrl}/api/v1/accounts/${chatwootConfig.accountId}/conversations/${cachedMessage.cvsId}/messages/${cachedMessage.id}`;\n\ttry {\n\t\tconst dataToCache = { ...cachedMessage, status: newStatus };\n\t\tawait client.set(messageId, JSON.stringify(dataToCache), { EX: TTL_SECONDS });\n\n\t\tconst options = {\n\t\t\tmethod: 'PATCH',\n\t\t\theaders: { 'api_access_token': chatwootConfig.userToken, 'Content-Type': 'application/json' },\n\t\t\tbody: { status: newStatus },\n\t\t\tjson: true,\n\t\t\turl: url,\n\t\t\tallowUnauthorizedCerts: true,\n\t\t};\n\n\t\tconst response = await this.helpers.httpRequest(options);\n\t\tconst infoMsg = `Status atualizado para \"${newStatus}\" com sucesso.`;\n\t\tprocessedResults.push({ messageId, status: 'success', info: infoMsg, url, apiResponse: response });\n\t\tsummaryLines.push(`${messageId}: ${newStatus}`);\n\n\t} catch (error) {\n\t\tconst errorMsg = `Falha na API do Chatwoot: ${JSON.stringify(error, null, 2)}`;\n\t\tprocessedResults.push({ messageId, status: 'error', url, error: errorMsg });\n\t\tsummaryLines.push(`${messageId}: Falha (API)`);\n\t}\n}\n\n// Fecha a conex√£o com o Redis\nawait client.quit();\n\n// Retorna o objeto final estruturado\nreturn {\n\tsummary: `${messageIds.length} mensagens processadas: ${summaryLines.join(' | ')}`,\n\tbaseUrlPattern: baseUrlPattern,\n\ttypeCheckLog: typeCheckLog,\n\tresults: processedResults\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -96
      ],
      "id": "2f9e3ae2-2b98-4cf3-9569-0f6b7b223472",
      "name": "Messages Status Updater"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "={{ $('Messages Status Updater').item.json.summary }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        928,
        -96
      ],
      "id": "a89c3880-71cb-4b21-b735-21c2efb57ddd",
      "name": "Execution Data5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Merge - Instance Chatwoot Data').item.json.installationUrl }}/api/v1/accounts/{{ $('Merge - Instance Chatwoot Data').item.json.accountId }}/conversations",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Merge - Instance Chatwoot Data').item.json.userToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  {{\n    ($('Find OR Create contact v0.2').isExecuted && $('Find OR Create contact v0.2').item.json.result == 'created_new' ) ? `\"source_id\": \"${$('Find OR Create contact v0.2').item.json.payload.contact_inboxes[0].source_id}\",` : ($('Nml - cached contactCvs').isExecuted \n      ? `\"source_id\": \"${$('Nml - cached contactCvs').item.json.source_id}\",`\n      : '')\n  }}\n  \"inbox_id\": {{ $('Merge - Instance Chatwoot Data').item.json.inboxId }},\n  \"contact_id\": {{ $('Nml - Contact id').isExecuted ? $('Nml - Contact id').item.json.id : $('Mrg - contactCvs data').item.json.id }}\n\n}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3872,
        -768
      ],
      "id": "a05a4cff-4072-4c63-8816-5747c8757d62",
      "name": "Create conversation (media - without message)",
      "alwaysOutputData": false,
      "executeOnce": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8a237508-4e1c-4703-8c76-6006dceb65bc",
              "leftValue": "={{ $('Nml - Webhook Data').item.json.cwMessageType }}",
              "rightValue": "outgoing",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4464,
        -1008
      ],
      "id": "13d1fdfb-875f-40f4-9e5c-80030bb1d439",
      "name": "Outgoing?"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        3552,
        -1296
      ],
      "id": "7fdb5f28-e004-4a9a-9e6b-dddcda0fb3c8",
      "name": "Limit 1 (first = most recent)"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7d575d87-99c5-4ec8-a7d6-ded8ebe48a07",
              "leftValue": "={{ $('Nml - Webhook Data').item.json.contentType }}",
              "rightValue": "text",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3616,
        -880
      ],
      "id": "81b431c1-a283-4cbb-afc3-5e3bb65b33cd",
      "name": "Text message?",
      "executeOnce": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3072,
        -48
      ],
      "id": "0c5acaa9-5c98-4e6f-92d9-153c5cf1320c",
      "name": "Mrg - Create message (cmnt)",
      "notes": "Pode receber "
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Merge - Instance Chatwoot Data').item.json.installationUrl }}/api/v1/accounts/{{ $('Merge - Instance Chatwoot Data').item.json.accountId }}/conversations",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Merge - Instance Chatwoot Data').item.json.userToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  {{\n    ($('Find OR Create contact v0.2').isExecuted && $('Find OR Create contact v0.2').item.json.result == 'created_new' ) ? `\"source_id\": \"${$('Find OR Create contact v0.2').item.json.payload.contact_inboxes[0].source_id}\",` : ($('Nml - cached contactCvs').isExecuted \n      ? `\"source_id\": \"${$('Nml - cached contactCvs').item.json.source_id}\",`\n      : '')\n  }}\n  \"inbox_id\": {{ $('Merge - Instance Chatwoot Data').item.json.inboxId }},\n  \"contact_id\": {{ $('Nml - Contact id').isExecuted ? $('Nml - Contact id').item.json.id : $('Mrg - contactCvs data').item.json.id }},\n  \"message\": {\n    \"content\": {{ $('Nml - Webhook Data').item.json.text.toJsonString() }},\n    \"message_type\": \"{{ $('Nml - Webhook Data').item.json.cwMessageType }}\",\n    \"source_id\": \"{{ $('Nml - Webhook Data').item.json.messageId }}\"\n  }\n}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3872,
        -1008
      ],
      "id": "6437c6c6-37e2-42da-80d1-ec93eb2328aa",
      "name": "Create conversation",
      "alwaysOutputData": false,
      "executeOnce": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a13f614e-4df1-4944-9acc-e3ef52588669",
              "leftValue": "={{ $('Get contact conversations').item.json.error.message }}",
              "rightValue": "=Resource could not be found",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2816,
        -1088
      ],
      "id": "29979ff0-168f-41e8-b6dd-3725030ee220",
      "name": "Resource (CONTACT) not found?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a13f614e-4df1-4944-9acc-e3ef52588669",
              "leftValue": "={{ $('Mrg - Create message (cmnt)').item.json.error.message }}",
              "rightValue": "=Resource could not be found",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3504,
        -48
      ],
      "id": "4ff6cbe9-5823-492f-844d-f9a604368816",
      "name": "Resource (CVS) not found?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://yearsinbox.uazapi.com/message/download",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Merge - Instance Chatwoot Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"id\": \"{{ $('Nml - Webhook Data').item.json.messageId.split('MID:')[1] }}\",\n  \"generate_mp3\": true\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2848,
        512
      ],
      "id": "9a4e4c6e-6ba3-4b93-a474-1313f2463ce8",
      "name": "Uazapi - Generate media Link"
    },
    {
      "parameters": {
        "errorMessage": "Erro persistente de \"Resource not found\" na cria√ß√£o da conversa (NECESS√ÅRIO AVERIGUAR O CONTEXTO DA OCORRR√äNCIA)!"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        2992,
        -1424
      ],
      "id": "945ad114-6199-4db4-82d4-a5db75f397cb",
      "name": "N√£o deveria ser permanente"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ae6c7db5-dc94-4b33-b04f-6a2ccfe16861",
              "leftValue": "={{ $runIndex }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2816,
        -1344
      ],
      "id": "76156000-1127-4c39-a360-cf1506b783ab",
      "name": "Turn back (2¬™ tentativa?)"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ae6c7db5-dc94-4b33-b04f-6a2ccfe16861",
              "leftValue": "={{ $runIndex }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3504,
        -256
      ],
      "id": "ab12a6f5-afde-401c-b8ea-bab3310f9bc4",
      "name": "Turn back (2¬™ tentativa?)1"
    },
    {
      "parameters": {
        "errorMessage": "Erro persistente de \"Resource not found\" na cria√ß√£o da conversa (NECESS√ÅRIO AVERIGUAR O CONTEXTO DA OCORRR√äNCIA)!"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        3696,
        -320
      ],
      "id": "d5886dba-92c5-4e82-ac61-a470a949d546",
      "name": "N√£o deveria ser permanente1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4336,
        80
      ],
      "id": "2b963fcf-896f-482e-aed4-47af8d41c1e5",
      "name": "Recebidas n√£o mudam de status1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4688,
        -912
      ],
      "id": "900057b3-fbb1-4216-b44a-3159db7f5e28",
      "name": "Recebidas n√£o mudam de status"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"id\": {{ $('Find OR Create contact v0.2').item.json.payload.id }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1840,
        -896
      ],
      "id": "dfa77bfd-00a6-4e33-a1cd-0827a7432282",
      "name": "Nml - Contact id"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $('Get cached contactCvs').item.json.result }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1664,
        -656
      ],
      "id": "f19df8be-dc27-468a-b473-285f34be4703",
      "name": "Nml - cached contactCvs"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "result",
        "key": "={{ $('Redis Keys').item.json.contactKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1200,
        -672
      ],
      "id": "86932deb-6495-4f8f-8705-8e864addfedb",
      "name": "Get cached contactCvs",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{\n  {\n    \"id\": $('Mrg - contactCvs data').isExecuted ? $('Mrg - contactCvs data').item.json.id : $('Nml - Contact id').item.json.id,\n    \"source_id\": $('Limit 1 (first = most recent)').item.json.messages[0].conversation.contact_inbox.source_id,\n    \"cvsId\": $('Limit 1 (first = most recent)').item.json.id,\n    \"cvsStatus\": \"open\"\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3728,
        -1296
      ],
      "id": "63215ab8-007f-42f1-9a8a-7ade8bf0a611",
      "name": "Nml - contactCvs Data"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Redis Keys').item.json.contactKey }}",
        "value": "={{ $('Nml - contactCvs Data').item.json.toJsonString() }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3904,
        -1296
      ],
      "id": "d97d32a1-8414-435a-9c04-1c20eb952822",
      "name": "Cache contactCvs",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Redis Keys').item.json.contactKey }}",
        "value": "={{ $('Nml - contactCvs to cache').item.json.toJsonString() }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4256,
        -1008
      ],
      "id": "bb58f31a-33aa-40bf-98d6-a9232ea6729a",
      "name": "Cache contactCvs1",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Nml - Webhook Data').item.json.messageId }}",
        "value": "={\"id\":{{ $('Create conversation').item.json.messages[0].id }},\"status\":\"delivered\",\"cvsId\":{{ $('Nml - contactCvs to cache').item.json.cvsId }}}",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4880,
        -1088
      ],
      "id": "9ccd22bb-90f9-4164-a858-38883229146d",
      "name": "Cache message (As Delivered!)",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Find OR Create contact v0.2').item.json.result }}",
                    "rightValue": "found",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "ef1fef59-8eb7-4440-8c01-11a703228433"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "found"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dfc1ab3a-4d22-4d71-9e87-7db68511f442",
                    "leftValue": "={{ $('Find OR Create contact v0.2').item.json.result }}",
                    "rightValue": "created_new",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "created"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2016,
        -896
      ],
      "id": "8cb55f4e-ebe6-49f5-98cd-b274025d18a6",
      "name": "Result Contact Search"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2304,
        -656
      ],
      "id": "9dd04702-baea-4c67-9bcf-a93e83d5999d",
      "name": "Mrg - contactCvs data",
      "executeOnce": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Get cached contactCvs').item.json.result }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "empty",
                      "singleValue": true
                    },
                    "id": "53b0384b-687a-4fa6-a3a3-55f3c5da85ac"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "No Cache..."
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "66afef94-220e-4bf9-9229-a84c16bb97a9",
                    "leftValue": "={{ $('Get cached contactCvs').item.json.result }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Cached!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1392,
        -672
      ],
      "id": "a73ace2b-8084-49d1-b78c-d2a5dcc853f0",
      "name": "Result Cache Search"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{\n  {\n    \"id\": $('Nml - Contact id').isExecuted ? $('Nml - Contact id').item.json.id : $('Mrg - contactCvs data').item.json.id,\n    \"source_id\": $('Create conversation').item.json.messages[0].conversation.contact_inbox.source_id,\n    \"cvsId\": $('Create conversation').item.json.id,\n    \"cvsStatus\": \"open\"\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4064,
        -1008
      ],
      "id": "5484ab4e-e284-4368-8778-f4822b2181ff",
      "name": "Nml - contactCvs to cache"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "Erro desconhecido ao enviar arquivo"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        4016,
        528
      ],
      "id": "0cc3465e-1317-4c67-a92b-34508ed640ad",
      "name": "Execution Data1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ typeof $('Create message (with attachment) (cmnt)').item.json.error !== \"object\" ? $('Create message (with attachment) (cmnt)').item.json.error : '' }}",
                    "rightValue": "=expects the node's input data to contain a binary file",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "440c3f50-4250-4d09-8649-cff172b57c8f"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Not Binary"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "aa097c8a-b44c-4cc2-b90e-5951a85a56fc",
                    "leftValue": "={{ typeof $('Create message (with attachment) (cmnt)').item.json.error !== \"object\" ? $('Create message (with attachment) (cmnt)').item.json.error : '' }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Unknown error"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        3728,
        528
      ],
      "id": "2ed42ecb-e817-462f-9e43-a31f24394043",
      "name": "Switch2"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Nml - Webhook Data').item.json.content.mimeType }}",
                    "rightValue": "plain",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "97b57ec8-e019-4d3e-8b7a-142659ab27d1"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "txt"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "534837f8-0c57-4346-af4f-98a6bb231fdb",
                    "leftValue": "={{ $('Uazapi - Generate media Link').item.json.fileURL }}",
                    "rightValue": ".json",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "json"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        3232,
        496
      ],
      "id": "781e95ac-5f5b-49fe-874b-778f5482ef5e",
      "name": "Txt"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "Payload espelho da tabela de relacionamento do Baserow"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        -1792,
        -848
      ],
      "id": "a5cbb551-fa4b-494b-aa9a-785e747155e8",
      "name": "Error - Payload lixo do baserow lookup"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "42773931-4d3b-422e-94d9-a6e5f5ff3aa7",
              "leftValue": "={{ $('Mrg - Inbox Result').isExecuted }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -928,
        -768
      ],
      "id": "12a5e78d-366b-4d8e-96f7-78db31a3e7e1",
      "name": "Altera√ß√£o no status do inbox?"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $json.installationUrl.split('//')[1].replace(':','Port').replace(/\\./g, '_').replace(/-/g, '_').replace(/_com_br/g, '_br') }}:token:acc{{ $json.accountId }}:i{{ $json.inboxId }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -320,
        -752
      ],
      "id": "ce9c0edb-28dd-409b-850e-c10e38088a49",
      "name": "Delete Inbox Token Cache",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "‚ùå Inbox Desativado"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        -112,
        256
      ],
      "id": "6cc6a307-6981-4a41-b34a-63b5f60665e3",
      "name": "‚ùå Inbox Desativado"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1072,
        -1216
      ],
      "id": "f93b39ed-661d-4a01-89bd-963b3bd06696",
      "name": "Mrg - Inbox Result"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1b63d9f2-0f3f-4c01-9fb9-e3ea41ffe66c",
                    "leftValue": "={{ $('Workflow Trigger').item.json.switchProcessor.eventType }}",
                    "rightValue": "BASEROW_ROWS_UPDATED",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "baserow_update"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3d7c4cd6-8139-4937-b6d2-d6f1c9ec95f9",
                    "leftValue": "={{ $('Workflow Trigger').item.json.switchProcessor.eventType }}",
                    "rightValue": "VALID_MESSAGE_CREATED",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "messages (created)"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Workflow Trigger').item.json.switchProcessor.eventType }}",
                    "rightValue": "VALID_UPDATE_STATE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "3db0bef3-1d75-40c9-9ff7-891d48ade6c6"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "messages_update"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3ab19c86-1edf-426a-b5db-cfaf57d8e1b5",
                    "leftValue": "={{ $('Workflow Trigger').item.json.switchProcessor.eventType }}",
                    "rightValue": "SYSTEM_MESSAGE",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "seystem_message"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2672,
        -32
      ],
      "id": "27edb948-b4a3-4cb8-88df-30870e8f3b5f",
      "name": "Switch1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "60736b06-d8c4-470e-8049-39fecc0fc1b7",
              "name": "contactKey",
              "value": "={{ $('Merge - Instance Chatwoot Data').item.json.installationUrl.split('//')[1].replace(':','Port').replace(/\\./g, '_').replace(/-/g, '_').replace(/_com_br/g, '_br') }}:acc{{ $('Merge - Instance Chatwoot Data').item.json.accountId }}:i{{ $('Merge - Instance Chatwoot Data').item.json.inboxId }}:ctt:{{ $('Nml - Webhook Data').item.json.contactData.phoneNumber }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1008,
        -672
      ],
      "id": "8f55056b-bc14-4306-84e8-8a9f8540d58a",
      "name": "Redis Keys"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c9053b39-d14a-46ea-921b-45020f5622c0",
              "name": "instanceKey",
              "value": "=api:instance:{{ $('Workflow Trigger').item.json.body.token }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1952,
        0
      ],
      "id": "e1f32b9e-289c-4446-8cdc-8b0172d6b080",
      "name": "Redis Instance Key"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9c54eff7-7a9d-4244-a491-616800fe9186",
              "leftValue": "={{ $('Merge - Instance Chatwoot Data').item.json.inboxStatus }}",
              "rightValue": "active",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "889650f1-6dd9-4365-ac42-977b9f8c8544",
              "leftValue": "={{ typeof ($('Merge - Instance Chatwoot Data').item.json.inboxId) == \"string\" ? $('Merge - Instance Chatwoot Data').item.json.inboxId.toNumber() : $('Merge - Instance Chatwoot Data').item.json.inboxId }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -112,
        32
      ],
      "id": "ccba069d-3f24-4f09-a39f-cc885526b195",
      "name": "Active Inbox?"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Nml - Webhook Data').item.json.messageId }}:TYPE",
        "value": "={{ $('Nml - Webhook Data').item.json.content?.mediaType ||  $('Nml - Webhook Data').item.json.contentType }}",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        800,
        -672
      ],
      "id": "57574db8-bfd0-4854-b430-1b525aba4c03",
      "name": "Cache MESSAGE TYPE",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb2d53c2-58a6-4f7e-84ed-baf92274e68d",
              "name": "log",
              "value": "=Status: ‚ùå Erro ao criar inbox - {{ $json.error.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -864,
        -1264
      ],
      "id": "8455c099-55e6-4f18-bc87-831ed45cb603",
      "name": "Log error"
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": "={{ $('Database Id').item.json.database }}",
        "tableId": "={{ $('Database Id').item.json.table_instance_chatwoot_config }}",
        "rowId": "={{ $('Workflow Trigger').item.json.body.items[0].id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "={{ $('Database Id').item.json.field_log_inbox }}",
              "fieldValue": "={{ $json.log }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -672,
        -1264
      ],
      "id": "7c05a4e6-9961-429b-b630-c49278fede52",
      "name": "Log1",
      "credentials": {
        "baserowApi": {
          "id": "XgJZ5iZG1GTSMra1",
          "name": "[yearsinbox@gmail]"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO message_map (stanza_id, cw_message_id, installation, cw_account_id, cw_inbox_id, cw_conversation_id, id_with_owner)\nVALUES (\n    '{{ $('Mrg - Create message (cmnt)').item.json.source_id }}',\n    {{ $('Mrg - Create message (cmnt)').item.json.id }},\n    '{{ $('Merge - Instance Chatwoot Data').item.json.installationUrl }}',\n    {{ $('Merge - Instance Chatwoot Data').item.json.accountId }},\n    {{ $('Mrg - Create message (cmnt)').item.json.inbox_id }},\n    {{ $('Mrg - Create message (cmnt)').item.json.conversation_id }},\n    '{{ $('Nml - Webhook Data').item.json.idWithOwner }}'\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4688,
        80
      ],
      "id": "5634a1dc-c161-40e4-8774-ac5243da8b12",
      "name": "Map Message Ids",
      "credentials": {
        "postgres": {
          "id": "L9p4mnsgiaYfT5Pi",
          "name": "yib_api_conector [postgres]"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        3232,
        848
      ],
      "id": "585c3d42-eb2b-4dfe-8c4b-a0125b2bc2d5",
      "name": "Convert to TXT"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8797db09-da96-4d6b-b81b-31be14defa0d",
              "name": "database",
              "value": 228,
              "type": "number"
            },
            {
              "id": "4ad03714-5040-46db-b6d2-698ae7890784",
              "name": "table_instance_chatwoot_config",
              "value": 953,
              "type": "number"
            },
            {
              "id": "21a0c1d9-aa3e-41ed-bc76-bd39dbccf861",
              "name": "field_inbox_id",
              "value": "9379",
              "type": "string"
            },
            {
              "id": "dcb3c446-ac06-4aba-90ca-425015066efb",
              "name": "field_log_inbox",
              "value": "9381",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2464,
        -192
      ],
      "id": "53536828-a1cd-45ca-b23c-16da01a4c521",
      "name": "Database Id"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8a237508-4e1c-4703-8c76-6006dceb65bc",
              "leftValue": "={{ $('Nml - Webhook Data').item.json.cwMessageType }}",
              "rightValue": "outgoing",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "2df021bc-e6d5-47dd-af57-dd793e194c4d",
              "leftValue": "={{ $('Nml - Webhook Data').item.json.switchProcessor?.includes('SYSTEM_MESSAGE') ?? false }}",
              "rightValue": "SYSTEM_MESSAGE",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "bf35e9c7-5c0b-4111-8515-ff727d5d33da",
              "leftValue": "={{ $('Nml - Webhook Data').item.json.deleted ?? false }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3872,
        -32
      ],
      "id": "2120ec12-bab1-48fd-8204-3108f8ade296",
      "name": "Outgoing? & !System & !Deleted"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8a237508-4e1c-4703-8c76-6006dceb65bc",
              "leftValue": "={{ $('Nml - Webhook Data').item.json.cwMessageType }}",
              "rightValue": "incoming",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4080,
        96
      ],
      "id": "8f3e32ce-a1c1-44ff-a769-8bbe929b3193",
      "name": "Incoming?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "32a6463b-e541-48fc-be79-d5a2eed8279a",
              "leftValue": "={{ $('Nml - Webhook Data').item.json.quoted ?? false }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "7e23f050-67e3-4b20-8a59-278d3f66b595",
              "leftValue": "={{ $('Nml - Webhook Data').item.json.edited ?? false }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "42f654ec-a6a7-4512-8140-31096b55dbae",
              "leftValue": "={{ $('Nml - Webhook Data').item.json.reaction ?? false }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "7b33d600-6d88-48de-a30a-23da75eff59d",
              "leftValue": "={{ $('Nml - Webhook Data').item.json.deleted ?? false }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2192,
        256
      ],
      "id": "b86b6885-165f-4995-8144-4474e6a70827",
      "name": "Quoted, edited, reaction or deleted?"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM message_map\nWHERE stanza_id = 'MID:{{ \n  $('Nml - Webhook Data').item.json.quotedId || \n  $('Nml - Webhook Data').item.json.editedId || \n  $('Nml - Webhook Data').item.json.deletedId || \n  $('Nml - Webhook Data').item.json.reactionId\n}}'\nAND cw_account_id = {{ $('Merge - Instance Chatwoot Data').item.json.accountId }}\nAND cw_inbox_id = {{ $('Merge - Instance Chatwoot Data').item.json.inboxId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2400,
        144
      ],
      "id": "2f37dd27-e717-4f80-8b1b-fcdd1c0bc1bd",
      "name": "Get messageId by instanzeId",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "L9p4mnsgiaYfT5Pi",
          "name": "yib_api_conector [postgres]"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ====================================\n// C√ìDIGO N8N - BUSCAR OU CRIAR CONTATO\n// ====================================\n\n// 1. OBTER DADOS DA MENSAGEM\nconst contactData = $('Nml - Webhook Data').item.json.contactData;\nconst webhookData = $('Nml - Webhook Data').item.json; //Adicionado para checar se mensagem √© 'outgoing'.\nconst chatwootData = $('Merge - Instance Chatwoot Data').item.json;\n\n// Dados da mensagem\nconst chatId = contactData.chatId;\nconst senderLid = contactData.lid;\nconst phoneNumber = contactData.phoneNumber;\nlet senderName = contactData.senderName;\n\n\n\n//Provis√≥rio enquanto n√£o damos um GET no contato quando iniciamos o contato pelo aplicativo do Whatsapp e o contato ainda n√£o existe no Chatwoot, para que n√£o crie com o nosso nome (somoso o \"sender\" nesse caso) ao inv√©s de nome do contato que estamos enviando\nif (webhookData.cwMessageType === 'outgoing') {\n  senderName = \"Sem nome\";\n}\n\n// Dados da inst√¢ncia Chatwoot\nconst baseUrl = chatwootData.installationUrl;\nconst accountId = chatwootData.accountId;\nconst userToken = chatwootData.userToken;\n//v.02\nconst inboxId = chatwootData.inboxId;\n\n// ====================================\n// 2. FUN√á√ÉO PARA FAZER CHAMADAS √Ä API\n// ====================================\nasync function chamarApiChatwoot(endpoint, metodo = 'GET', dados = null) {\n  const opcoes = {\n    method: metodo,\n    url: `${baseUrl}/api/v1/accounts/${accountId}${endpoint}`,\n    headers: {\n      'api_access_token': userToken\n    }\n  };\n  \n  // Se for POST, adicionar dados no corpo\n  if (metodo === 'POST' && dados) {\n    opcoes.body = dados;\n    opcoes.json = true;\n  }\n  \n  try {\n    const resposta = await this.helpers.httpRequest(opcoes);\n    return resposta;\n  } catch (erro) {\n    console.error('Erro na chamada da API:', erro);\n    throw erro;\n  }\n}\n\n// ====================================\n// 3. FUN√á√ïES DE BUSCA DE CONTATO\n// ====================================\n\n// Buscar contato pelo WhatsApp ID completo\nasync function buscarPorChatId() {\n  console.log('üîç Buscando contato por Chat ID:', chatId);\n  const resultado = await chamarApiChatwoot(`/contacts/search?q=${chatId}`);\n  return resultado.meta.count > 0 ? resultado : null;\n}\n\n// Buscar contato pelo LID (identificador local)\nasync function buscarPorLid() {\n  if (!senderLid) {\n    console.log('‚ùå Sender LID n√£o dispon√≠vel');\n    return null;\n  }\n  \n  console.log('üîç Buscando contato por LID:', senderLid);\n  const resultado = await chamarApiChatwoot(`/contacts/search?q=${senderLid}`);\n  return resultado.meta.count > 0 ? resultado : null;\n}\n\n// Buscar contato pelo n√∫mero de telefone\nasync function buscarPorTelefone() {\n  console.log('üîç Buscando contato por telefone:', phoneNumber);\n  const resultado = await chamarApiChatwoot(`/contacts/search?q=${phoneNumber}`);\n  return resultado.meta.count > 0 ? resultado : null;\n}\n\n// ====================================\n// 4. FUN√á√ÉO PARA CRIAR NOVO CONTATO\n// ====================================\nasync function criarNovoContato() {\n  console.log('‚ûï Criando novo contato para:', senderName);\n  \n  const dadosContato = {\n    name: senderName,\n    phone_number: `+${phoneNumber}`,\n    identifier: chatId,\n    inbox_id: inboxId //v0.2\n  };\n  \n  const novoContato = await chamarApiChatwoot('/contacts', 'POST', dadosContato);\n  console.log('‚úÖ Contato criado com sucesso!');\n  \n  // A API de cria√ß√£o de contato retorna o contato dentro de `payload.contact`.\n  // Retornamos apenas o objeto de contato para manter a consist√™ncia.\n  return novoContato.payload.contact;\n}\n\n// ====================================\n// 5. L√ìGICA PRINCIPAL - BUSCAR OU CRIAR\n// ====================================\nasync function processarContato() {\n  let contato = null;\n  \n  // Tentativa 1: Buscar por Chat ID (WhatsApp ID completo)\n  contato = await buscarPorChatId();\n  if (contato) {\n    console.log('‚úÖ Contato encontrado por Chat ID');\n    return { dados: contato, chave: 'found_by_chat_id' };\n  }\n  \n  // Tentativa 2: Buscar por LID (se dispon√≠vel)\n  contato = await buscarPorLid();\n  if (contato) {\n    console.log('‚úÖ Contato encontrado por LID');\n    return { dados: contato, chave: 'found_by_lid' };\n  }\n  \n  // Tentativa 3: Buscar por n√∫mero de telefone\n  contato = await buscarPorTelefone();\n  if (contato) {\n    console.log('‚úÖ Contato encontrado por telefone');\n    return { dados: contato, chave: 'found_by_phone' };\n  }\n  \n  // Se n√£o encontrou nada, criar novo contato\n  console.log('‚ùå Contato n√£o encontrado. Criando novo...');\n  contato = await criarNovoContato();\n  return { dados: contato, chave: 'created_new' };\n}\n\n// ====================================\n// 6. EXECUTAR E RETORNAR RESULTADO\n// ====================================\ntry {\n  const resultado = await processarContato();\n  \n  // Inicializa a resposta\n  let respostaFinal;\n  \n  // Se a busca retornar dados no formato `meta` e `payload`, extra√≠mos o `meta` e o primeiro contato do `payload`\n  if (resultado.dados.meta && resultado.dados.payload) {\n    respostaFinal = {\n      meta: resultado.dados.meta,\n      payload: resultado.dados.payload[0],\n      result: resultado.chave\n    };\n  } else {\n    // Se for um novo contato criado, ele j√° vem no formato que queremos.\n    respostaFinal = {\n      payload: resultado.dados,\n      result: resultado.chave\n    };\n  }\n  \n  return [{\n    json: respostaFinal\n  }];\n  \n} catch (error) {\n  console.error('‚ùå Erro no processamento:', error);\n  throw new Error(`Falha ao buscar/criar contato: ${error.message}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1664,
        -896
      ],
      "id": "63752c98-219f-4c4a-9d31-c3c1864e4069",
      "name": "Find OR Create contact v0.2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{\n  {\n    \"id\": $('Nml - Contact id').isExecuted ? $('Nml - Contact id').item.json.id : $('Mrg - contactCvs data').item.json.id,\n    \"source_id\": $('Find Contact and Filter created contact_inbox').item.json.payload.contact_inboxes.source_id,\n    \"cvsId\": $('Create conversation (media - without message)').item.json.id,\n    \"cvsStatus\": \"open\"\n  }\n}}\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4256,
        -768
      ],
      "id": "1acc5c59-8662-4af5-ad04-bfa62490a55e",
      "name": "Nml - contactCvs to cache1"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Redis Keys').item.json.contactKey }}",
        "value": "={{ $('Nml - contactCvs to cache1').item.json.toJsonString() }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4464,
        -768
      ],
      "id": "b570c674-6a01-4b62-984d-c3e0a48ba1bd",
      "name": "Nml - contactCvs to cache2",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ====================================\n// C√ìDIGO N8N - BUSCAR CONTATO\n// ====================================\n\n// 1. OBTER DADOS DA MENSAGEM\nconst webhookData = $('Nml - Webhook Data').item.json.contactData;\nconst chatwootData = $('Merge - Instance Chatwoot Data').item.json;\n\n// Dados da mensagem\nconst chatId = webhookData.chatId;\nconst senderLid = webhookData.lid;\nconst phoneNumber = webhookData.phoneNumber;\n\n// Dados da inst√¢ncia Chatwoot\nconst baseUrl = chatwootData.installationUrl;\nconst accountId = chatwootData.accountId;\nconst userToken = chatwootData.userToken;\n//v.02\nconst inboxId = parseInt(chatwootData.inboxId); //Parse Int porque o baserow est√° retornando string.\n\n// ====================================\n// 2. FUN√á√ÉO PARA FAZER CHAMADAS √Ä API\n// ====================================\nasync function chamarApiChatwoot(endpoint, metodo = 'GET') {\n  const opcoes = {\n    method: metodo,\n    url: `${baseUrl}/api/v1/accounts/${accountId}${endpoint}`,\n    headers: {\n      'api_access_token': userToken\n    }\n  };\n\n  try {\n    const resposta = await this.helpers.httpRequest(opcoes);\n    return resposta;\n  } catch (erro) {\n    console.error('Erro na chamada da API:', erro);\n    throw erro;\n  }\n}\n\n// ====================================\n// 3. FUN√á√ïES DE BUSCA DE CONTATO\n// ====================================\n\n// Buscar contato pelo WhatsApp ID completo\nasync function buscarPorChatId() {\n  console.log('üîç Buscando contato por Chat ID:', chatId);\n  const resultado = await chamarApiChatwoot(`/contacts/search?q=${chatId}`);\n  return resultado.meta.count > 0 ? resultado : null;\n}\n\n// Buscar contato pelo LID (identificador local)\nasync function buscarPorLid() {\n  if (!senderLid) {\n    console.log('‚ùå Sender LID n√£o dispon√≠vel');\n    return null;\n  }\n  \n  console.log('üîç Buscando contato por LID:', senderLid);\n  const resultado = await chamarApiChatwoot(`/contacts/search?q=${senderLid}`);\n  return resultado.meta.count > 0 ? resultado : null;\n}\n\n// Buscar contato pelo n√∫mero de telefone\nasync function buscarPorTelefone() {\n  console.log('üîç Buscando contato por telefone:', phoneNumber);\n  const resultado = await chamarApiChatwoot(`/contacts/search?q=${phoneNumber}`);\n  return resultado.meta.count > 0 ? resultado : null;\n}\n\n// ====================================\n// 5. L√ìGICA PRINCIPAL - BUSCAR OU CRIAR\n// ====================================\nasync function processarContato() {\n  let contato = null;\n  \n  // Tentativa 1: Buscar por Chat ID (WhatsApp ID completo)\n  contato = await buscarPorChatId();\n  if (contato) {\n    console.log('‚úÖ Contato encontrado por Chat ID');\n    return { dados: contato, chave: 'found_by_chat_id' };\n  }\n  \n  // Tentativa 2: Buscar por LID (se dispon√≠vel)\n  contato = await buscarPorLid();\n  if (contato) {\n    console.log('‚úÖ Contato encontrado por LID');\n    return { dados: contato, chave: 'found_by_lid' };\n  }\n  \n  // Tentativa 3: Buscar por n√∫mero de telefone\n  contato = await buscarPorTelefone();\n  if (contato) {\n    console.log('‚úÖ Contato encontrado por telefone');\n    return { dados: contato, chave: 'found_by_phone' };\n  }\n  \n}\n\n// ====================================\n// 6. EXECUTAR E RETORNAR RESULTADO\n// ====================================\ntry {\n  const resultado = await processarContato();\n  \n  // Se nenhum contato for encontrado, o 'resultado' pode ser nulo ou indefinido.\n  // Retornamos um item vazio para que o workflow possa tratar isso (ex: parar ou seguir por outro caminho).\n  if (!resultado) {\n    console.log('üõë Nenhum contato encontrado em nenhuma das tentativas.');\n    return [{ json: { result: 'contact_not_found' } }];\n  }\n\n  // Inicializa a resposta\n  let respostaFinal;\n  \n  // Se a busca retornar dados, extra√≠mos e filtramos o payload.\n  if (resultado.dados.meta && resultado.dados.payload && resultado.dados.payload.length > 0) {\n    // Pega o primeiro contato encontrado no payload\n    const contatoEncontrado = resultado.dados.payload[0];\n\n    // Verifica se existe o array 'contact_inboxes' para evitar erros\n    if (contatoEncontrado.contact_inboxes && Array.isArray(contatoEncontrado.contact_inboxes)) {\n      \n      // Usa .find() para encontrar o objeto 'contact_inbox' correto\n      // A condi√ß√£o √© que o 'inbox.id' interno seja igual ao 'inboxId' da inst√¢ncia\n      const inboxCorreta = contatoEncontrado.contact_inboxes.find(\n        ci => ci.inbox && ci.inbox.id === inboxId\n      );\n\n      // Substitui o array [contact_inboxes] pelo objeto √∫nico encontrado (ou null se n√£o encontrar)\n      contatoEncontrado.contact_inboxes = inboxCorreta || null;\n    }\n    \n    // Monta a resposta final com o payload j√° modificado\n    respostaFinal = {\n      meta: resultado.dados.meta,\n      payload: contatoEncontrado, // O payload agora cont√©m a inbox filtrada\n      result: resultado.chave\n    };\n  }\n  \n  return [{\n    json: respostaFinal\n  }];\n  \n} catch (error) {\n  console.error('‚ùå Erro no processamento:', error);\n  // Garante que o workflow pare em caso de erro na API, por exemplo.\n  throw new Error(`Falha ao buscar/criar contato: ${error.message}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4064,
        -768
      ],
      "id": "6fdd778f-923b-446b-b08c-3da1dcf4fe11",
      "name": "Find Contact and Filter created contact_inbox"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4b0fb66c-881a-49e8-a8cf-3391713c429e",
              "leftValue": "={{ $('Workflow Trigger').item.json.switchProcessor.eventType }}",
              "rightValue": "SYSTEM_MESSAGE_ERROR",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -464,
        16
      ],
      "id": "073db52a-57c4-46e8-90ec-0b5e9bb678a8",
      "name": "Sys Error?"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ $('Merge - Instance Chatwoot Data').item.json.installationUrl }}/api/v1/accounts/{{ $('Merge - Instance Chatwoot Data').item.json.accountId }}/conversations/{{ $('Workflow Trigger').item.json.extra.conversationId }}/messages/{{ $('Workflow Trigger').item.json.extra.messageId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Merge - Instance Chatwoot Data').item.json.userToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{ \"status\": \"failed\"}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -288,
        -192
      ],
      "id": "ba0d6a22-a924-4e1d-8a92-b59333db5318",
      "name": "Agent Message status - Failed",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4336,
        272
      ],
      "id": "2a2dd2cb-f751-44ab-92d3-40ae3189e881",
      "name": "System & Deleted n√£o precisa mapear"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Nml - Webhook Data').item.json.contentType === 'text' ||  $('Nml - Webhook Data').item.json.contentType === 'reaction' || $('Nml - Webhook Data').item.json.contentType === 'deletion' && $('Get messageId by instanzeId').item.json.deleted === false }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "2c4cd8e8-d38d-40fe-9a8d-d9da9ace74f6"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7d3ee59b-d056-4319-9cff-d5a3cd106619",
                    "leftValue": "={{ $('Nml - Webhook Data').item.json.contentType }}",
                    "rightValue": "media",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "media"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "98c0325b-580f-4585-9d40-d409c0a2486f",
                    "leftValue": "={{ $('Nml - Webhook Data').item.json.contentType === 'deletion' && $('Get messageId by instanzeId').item.json.deleted === true }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "already deleted"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2576,
        240
      ],
      "id": "0bba23b3-a98e-40be-ae68-afffb8034d52",
      "name": "Switch4"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "=Deleted - Evento gerado por mensagem apagada no Chatwoot (portanto j√° marcada)."
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        2560,
        560
      ],
      "id": "a23b3053-7e83-40eb-b1dd-648771f14dd5",
      "name": "Deleted on Chatwoot"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "=Unhandled Event: {{ $('Nml - Webhook Data').item.json.contentType }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        2528,
        720
      ],
      "id": "14a2ea4c-b82a-420b-a711-de7aeea645f2",
      "name": "Fallback"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "a13f614e-4df1-4944-9acc-e3ef52588669",
              "leftValue": "={{ $('Conversas NO INBOX?').item.json }}",
              "rightValue": "={{ $('Merge - Instance Chatwoot Data').item.json.inboxId }}",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3248,
        -1072
      ],
      "id": "41f31475-588a-4f5d-8bdb-772d6e178524",
      "name": "Found?"
    },
    {
      "parameters": {
        "jsCode": "const payload = $('Get contact conversations').item.json.payload;\nconst targetInboxId = $('Merge - Instance Chatwoot Data').item.json.inboxId;\n\n// Procura o primeiro item que tenha inbox_id igual ao valor desejado\nconst foundItem = payload.find(item => item.inbox_id === targetInboxId);\n\n// Retorna o item encontrado ou null se n√£o encontrar nenhum\nreturn foundItem || null;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3056,
        -1072
      ],
      "id": "b9f7fe61-9a01-44b7-82d7-aabd64851fc6",
      "name": "Conversas NO INBOX?",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Pega todos os itens que chegam ao n√≥ e extrai apenas a parte JSON de cada um.\nconst allJsonData = $input.all().map(item => item.json);\n\n// Decide qual ser√° o conte√∫do final do JSON.\nconst jsonToProcess = allJsonData.length === 1 ? allJsonData[0] : allJsonData;\n\n// Converte o objeto/array JSON final para uma string.\nconst jsonString = JSON.stringify(jsonToProcess, null, 2);\n\n// Cria um Buffer (dados bin√°rios) a partir da string JSON.\nconst buffer = Buffer.from(jsonString, 'utf-8');\n\n// Prepara os dados bin√°rios\nconst binaryData = await this.helpers.prepareBinaryData(buffer, 'file.json');\n\nreturn {\n  json: {},\n  binary: {\n    data: binaryData // Adiciona os dados bin√°rios\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3232,
        1024
      ],
      "id": "02958a9a-5bb5-4ede-8cb8-348e102c2e3a",
      "name": "Convert to Json (cmnt)",
      "notes": "Marquei pra retornar em itens separados porque do contr√°rio ele adiciona a chave de array ('[ ]') do N8N e, por exemplo, o json deixa de funcionar pra importa√ß√£o no N8N.\n\nüëÜ Isso era v√°lido para o node conversor padr√£o do n8N. Mas agora no code a ideia √© parecida... estamos considerando todo o input como um √∫nico item a ser \"pushado\" para o bin√°rio. Ent√£o agora resolvemos o bug no caso de o .json ser apenas um array, agora estamos gerando o arquivo corretamente, e n√£o v√°rios itens como acontecia antes gerando mensagens no Chatwoot na quantidade de itens do array!"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Merge - Instance Chatwoot Data').item.json.installationUrl }}/api/v1/accounts/{{ $('Merge - Instance Chatwoot Data').item.json.accountId }}/conversations/{{ $('Mrg - contactCvs data').item.json.cvsId || $('Create conversation (media - without message)').item.json.id }}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Merge - Instance Chatwoot Data').item.json.userToken }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "attachments[]",
              "inputDataFieldName": "data"
            },
            {
              "name": "content",
              "value": "={{ $('Nml - Webhook Data').item.json.content.caption || '' }}"
            },
            {
              "name": "message_type",
              "value": "={{ $('Nml - Webhook Data').item.json.cwMessageType }}"
            },
            {
              "name": "source_id",
              "value": "={{ $('Nml - Webhook Data').item.json.messageId }}"
            },
            {
              "name": "content_attributes[in_reply_to]",
              "value": "={{ $('Get messageId by instanzeId').isExecuted && $('Get messageId by instanzeId').item.json.cw_message_id !== undefined ? $('Get messageId by instanzeId').item.json.cw_message_id : '' }}"
            },
            {
              "name": "content_attributes[in_reply_to_external_id]",
              "value": "={{ $('Get messageId by instanzeId').isExecuted && $('Get messageId by instanzeId').item.json.stanza_id !== undefined ? $('Get messageId by instanzeId').item.json.stanza_id : '' }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3504,
        544
      ],
      "id": "2bfd6552-7562-4a04-a687-082ec6ba6ab4",
      "name": "Create message (with attachment) (cmnt)",
      "alwaysOutputData": false,
      "executeOnce": true,
      "onError": "continueRegularOutput",
      "notes": "O execute Once evita bug de loop infinito. Cen√°rio observado: Joson apenas com array (antes do node code)... cada item do array gerava um file dentro do Chatwoot!"
    }
  ],
  "connections": {
    "Workflow Trigger": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Cache MESSAGE TYPE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Messages Status Updater",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No data?": {
      "main": [
        [
          {
            "node": "Get Instance&Chatwoot Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Nml - Instance Chatwoot Cached Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Instance&Chatwoot Data": {
      "main": [
        [
          {
            "node": "Nml - Instance Chatwoot Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Instance TTL 30D": {
      "main": [
        [
          {
            "node": "Merge - Instance Chatwoot Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Instance TTL 30D1": {
      "main": [
        [
          {
            "node": "Delete Inbox Token Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Instance Key": {
      "main": [
        [
          {
            "node": "Normalizer Baserow Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Instance Chatwoot Data": {
      "main": [
        [
          {
            "node": "No data?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inst√¢ncias a serem editadas": {
      "main": [
        [
          {
            "node": "Get InstanceSS Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalizer Baserow Data": {
      "main": [
        [
          {
            "node": "Altera√ß√£o no status do inbox?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Baserow Change": {
      "main": [
        [
          {
            "node": "Switch3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coluna Inbox Id preenchida?": {
      "main": [
        [
          {
            "node": "New Value = Inactive?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Status puro, sem ID, n√£o significa nada!",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coluna Status como active?": {
      "main": [
        [
          {
            "node": "New Value = Empty?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Coluna status inactive fazemos nada!",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obt√©m inboxes": {
      "main": [
        [
          {
            "node": "Search Inbox Id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Existe esse inbox ID?": {
      "main": [
        [
          {
            "node": "SET Cache Lock Inbox Id Change 6s1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create a Inbox (Run once!!)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Cache Lock Inbox Id Change": {
      "main": [
        [
          {
            "node": "Locked?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SET Cache Lock Inbox Id Change 6s": {
      "main": [
        [
          {
            "node": "Set new inbox Id & Wait Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 6s": {
      "main": [
        [
          {
            "node": "Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log": {
      "main": [
        [
          {
            "node": "INBOX ID AND SATUS3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "Error - Payload lixo do baserow lookup",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Coluna Status como active?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Coluna Inbox Id preenchida?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete Instance Key",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Inst√¢ncias a serem editadas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locked?": {
      "main": [
        [
          {
            "node": "Esfria a cuca... (Trash Webhook)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Obt√©m inboxes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Instance Key (ItemSS!)": {
      "main": [
        [
          {
            "node": "Normalizer Baserow Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove this.inboxId from this.key": {
      "main": [
        [
          {
            "node": "INBOX ID AND SATUS1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "New Value = Empty?": {
      "main": [
        [
          {
            "node": "Deactivate this.inboxId from this.key",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Cache Lock Inbox Id Change",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "New Value = Inactive?": {
      "main": [
        [
          {
            "node": "Remove this.inboxId from this.key",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Cache Lock Inbox Id Change",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deactivate this.inboxId from this.key": {
      "main": [
        [
          {
            "node": "INBOX ID AND SATUS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a Inbox (Run once!!)": {
      "main": [
        [
          {
            "node": "SET Cache Lock Inbox Id Change 6s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SET Cache Lock Inbox Id Change 6s1": {
      "main": [
        [
          {
            "node": "Update And Log1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set new inbox Id & Wait Message": {
      "main": [
        [
          {
            "node": "Wait 6s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "INBOX ID AND SATUS": {
      "main": [
        [
          {
            "node": "Mrg - Inbox Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "INBOX ID AND SATUS1": {
      "main": [
        [
          {
            "node": "Mrg - Inbox Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get InstanceSS Rows": {
      "main": [
        [
          {
            "node": "Delete Instance Key (ItemSS!)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "INBOX ID AND SATUS3": {
      "main": [
        [
          {
            "node": "Mrg - Inbox Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Set Instance TTL 30D1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Inbox Id": {
      "main": [
        [
          {
            "node": "Existe esse inbox ID?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "INBOX ID AND SATUS4": {
      "main": [
        [
          {
            "node": "Mrg - Inbox Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update And Log1": {
      "main": [
        [
          {
            "node": "INBOX ID AND SATUS4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get contact conversations": {
      "main": [
        [
          {
            "node": "Resource (CONTACT) not found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create message": {
      "main": [
        [
          {
            "node": "Mrg - Create message (cmnt)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message status - Delivered1": {
      "main": [
        [
          {
            "node": "Cache Message As Delivered1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message status - Delivered": {
      "main": [
        [
          {
            "node": "Cache message (As Delivered!)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - Instance Chatwoot Cached Data": {
      "main": [
        [
          {
            "node": "Merge - Instance Chatwoot Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - Instance Chatwoot Data1": {
      "main": [
        [
          {
            "node": "Set Instance TTL 30D",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge - Instance Chatwoot Data": {
      "main": [
        [
          {
            "node": "Sys Error?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache Message As Delivered1": {
      "main": [
        [
          {
            "node": "Map Message Ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - Webhook Data": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Binary File": {
      "main": [
        [
          {
            "node": "Txt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Messages Status Updater": {
      "main": [
        [
          {
            "node": "Execution Data5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create conversation (media - without message)": {
      "main": [
        [
          {
            "node": "Find Contact and Filter created contact_inbox",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Outgoing?": {
      "main": [
        [
          {
            "node": "Message status - Delivered",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Recebidas n√£o mudam de status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit 1 (first = most recent)": {
      "main": [
        [
          {
            "node": "Nml - contactCvs Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text message?": {
      "main": [
        [
          {
            "node": "Create conversation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create conversation (media - without message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mrg - Create message (cmnt)": {
      "main": [
        [
          {
            "node": "Resource (CVS) not found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create conversation": {
      "main": [
        [
          {
            "node": "Nml - contactCvs to cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resource (CONTACT) not found?": {
      "main": [
        [
          {
            "node": "Turn back (2¬™ tentativa?)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Conversas NO INBOX?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resource (CVS) not found?": {
      "main": [
        [
          {
            "node": "Turn back (2¬™ tentativa?)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Outgoing? & !System & !Deleted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Generate media Link": {
      "main": [
        [
          {
            "node": "Get Binary File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turn back (2¬™ tentativa?)": {
      "main": [
        [
          {
            "node": "N√£o deveria ser permanente",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Find OR Create contact v0.2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turn back (2¬™ tentativa?)1": {
      "main": [
        [
          {
            "node": "N√£o deveria ser permanente1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get contact conversations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recebidas n√£o mudam de status1": {
      "main": [
        [
          {
            "node": "Map Message Ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - Contact id": {
      "main": [
        [
          {
            "node": "Result Contact Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - cached contactCvs": {
      "main": [
        [
          {
            "node": "Mrg - contactCvs data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get cached contactCvs": {
      "main": [
        [
          {
            "node": "Result Cache Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - contactCvs Data": {
      "main": [
        [
          {
            "node": "Cache contactCvs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache contactCvs": {
      "main": [
        [
          {
            "node": "Mrg - contactCvs data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache contactCvs1": {
      "main": [
        [
          {
            "node": "Outgoing?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Result Contact Search": {
      "main": [
        [
          {
            "node": "Get contact conversations",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text message?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mrg - contactCvs data": {
      "main": [
        [
          {
            "node": "Quoted, edited, reaction or deleted?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Result Cache Search": {
      "main": [
        [
          {
            "node": "Find OR Create contact v0.2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Nml - cached contactCvs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - contactCvs to cache": {
      "main": [
        [
          {
            "node": "Cache contactCvs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Execution Data1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execution Data1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Mrg - Create message (cmnt)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Txt": {
      "main": [
        [
          {
            "node": "Convert to TXT",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to Json (cmnt)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create message (with attachment) (cmnt)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Altera√ß√£o no status do inbox?": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Instance TTL 30D1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mrg - Inbox Result": {
      "main": [
        [
          {
            "node": "Delete Instance Key",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Database Id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis Instance Key",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis Instance Key",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis Instance Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Keys": {
      "main": [
        [
          {
            "node": "Get cached contactCvs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Instance Key": {
      "main": [
        [
          {
            "node": "Get Instance Chatwoot Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Active Inbox?": {
      "main": [
        [
          {
            "node": "Nml - Webhook Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå Inbox Desativado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache MESSAGE TYPE": {
      "main": [
        [
          {
            "node": "Redis Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log error": {
      "main": [
        [
          {
            "node": "Log1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to TXT": {
      "main": [
        [
          {
            "node": "Create message (with attachment) (cmnt)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Database Id": {
      "main": [
        [
          {
            "node": "Filter Baserow Change",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Outgoing? & !System & !Deleted": {
      "main": [
        [
          {
            "node": "Message status - Delivered1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Incoming?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Incoming?": {
      "main": [
        [
          {
            "node": "Recebidas n√£o mudam de status1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "System & Deleted n√£o precisa mapear",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quoted, edited, reaction or deleted?": {
      "main": [
        [
          {
            "node": "Get messageId by instanzeId",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get messageId by instanzeId": {
      "main": [
        [
          {
            "node": "Switch4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find OR Create contact v0.2": {
      "main": [
        [
          {
            "node": "Nml - Contact id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - contactCvs to cache1": {
      "main": [
        [
          {
            "node": "Nml - contactCvs to cache2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - contactCvs to cache2": {
      "main": [
        [
          {
            "node": "Mrg - contactCvs data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Contact and Filter created contact_inbox": {
      "main": [
        [
          {
            "node": "Nml - contactCvs to cache1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sys Error?": {
      "main": [
        [
          {
            "node": "Agent Message status - Failed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Active Inbox?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent Message status - Failed": {
      "main": [
        [
          {
            "node": "Active Inbox?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch4": {
      "main": [
        [
          {
            "node": "Create message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Uazapi - Generate media Link",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Deleted on Chatwoot",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fallback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Found?": {
      "main": [
        [
          {
            "node": "Limit 1 (first = most recent)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text message?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversas NO INBOX?": {
      "main": [
        [
          {
            "node": "Found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Json (cmnt)": {
      "main": [
        [
          {
            "node": "Create message (with attachment) (cmnt)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create message (with attachment) (cmnt)": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b780b69c87731f6ce3bc879be6a4e1433ff4eb49ccba6717e96bdd4d992b279a"
  }
}
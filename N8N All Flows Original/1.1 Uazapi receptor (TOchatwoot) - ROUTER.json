{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "yib-baserow-instance-controller-PROD",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -656,
        -944
      ],
      "id": "b2948300-0c4b-45a2-b3eb-e6a2c79e2cc4",
      "name": "Baserow Webhook",
      "webhookId": "a80675e2-06d3-4789-82f3-6f54c9b1134f"
    },
    {
      "parameters": {
        "content": "# Fontes de entrada para o flow:\n\n## Baserow Webhook ---- /yib-baserow-instance-controller-PROD\n### Webhook \"Rows are updated\" das duas tabelas usadas na configuração da integração para as instâncias.\n\n## Uazapi Webhook ---- /yib-uazapi-receptor-TOchatwoot-PROD\n### Configurações do webhook para as instâncias da [Uazapi!](https://uazapi.dev/interno?p=conecte)",
        "height": 288,
        "width": 848,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -672,
        -1360
      ],
      "typeVersion": 1,
      "id": "38415e34-93b9-42e2-9e25-ef662e5f6649",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "50869f0f-7efc-4daa-acc1-8b63b83edf32",
                    "leftValue": "={{ $('Switch Processor').item.json.switchProcessor.eventType }}",
                    "rightValue": "VALID_MESSAGE_CREATED",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "message_created"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Switch Processor').item.json.switchProcessor.eventType }}",
                    "rightValue": "VALID_UPDATE_STATE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "fca399e4-685d-48a3-8032-c799faad6f23"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "messages_update"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2ecdb77b-e977-42eb-a7ff-3f38ddb42000",
                    "leftValue": "={{ $('Uazapi Webhook').item.json.body.EventType ?? '' }}",
                    "rightValue": "presence",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "presence"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c4a99af9-ffe9-46ce-ab96-31e701ad5ab6",
                    "leftValue": "={{ $('Uazapi Webhook').item.json.body.event?.IsGroup ?? false }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "group_message"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "32e986ca-8519-4f1a-9e15-4c5a3b3d60d8",
                    "leftValue": "={{ $('Switch Processor').item.json.switchProcessor.eventType }}",
                    "rightValue": "DISCARD",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "discard"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -256,
        -752
      ],
      "id": "669b274a-4726-41f4-9333-46fae54b7873",
      "name": "Switch"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "={{ $('Switch Processor').item.json.discardReason }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        0,
        -576
      ],
      "id": "d9da3910-a0de-4caf-873a-e485ec232cea",
      "name": "Discarded event"
    },
    {
      "parameters": {
        "jsCode": "/*====================================\n INICIALIZAÇÃO E EXTRAÇÃO DE DADOS\n Extrai todos os dados necessários do corpo\n do webhook para variáveis legíveis e seguras.\n====================================*/\nconst item = items[0];\nconst body = item.json.body || {};\n\nconst mainEventType = body.EventType;\nconst updateEventType = body.event?.Type;\nconst updateState = body.state;\nconst wasSentByApi = body.message?.wasSentByApi;\n\n// Variáveis para armazenar o resultado do processamento\nlet eventType = '';\nlet discardReason = '';\n\n\n/*====================================\n LÓGICA DE ROTEAMENTO\n O fluxo prioriza o evento principal 'messages'\n e inclui um fallback.\n====================================*/\n\n// ROTA 1 (Principal): O evento é 'messages'\nif (mainEventType === 'messages') {\n  if (wasSentByApi === false) {\n    eventType = 'VALID_MESSAGE_CREATED';\n  } else {\n    eventType = 'DISCARD';\n    discardReason = 'Event was sent by API';\n  }\n}\n// ROTA 2 (Secundária): O evento é 'messages_update'\nelse if (mainEventType === 'messages_update') {\n  const knownUpdateTypesToDiscard = ['played-self', 'inactive', 'sender', 'peer_msg', 'retry']; //retry é o que trazia evento de read mas sem o state. O que não é tratado em meu MAIN. E prefiro eliminar logo aqui porque não me parece ser útil pra nada.\n  const knownStateToDiscard = 'FileDownloaded';\n\n  if (knownUpdateTypesToDiscard.includes(updateEventType) || updateState === knownStateToDiscard) {\n    eventType = 'DISCARD';\n    const discardValue = updateEventType || updateState;\n    const discardKey = updateEventType ? 'type' : 'state';\n    discardReason = `Known update event to ignore (${discardKey}): ${discardValue}`;\n  } else {\n    eventType = 'VALID_UPDATE_STATE'; // Ou VALID_MESSAGES_UPDATE\n  }\n}\n// ROTA 3 (Fallback): Nenhum dos eventos esperados\nelse {\n  eventType = 'DISCARD';\n  discardReason = `Unhandled main EventType: ${mainEventType || 'not found'}`;\n}\n\n\n/*====================================\n MONTAGEM DA SAÍDA\n Cria o objeto 'switchProcessor' e o insere\n no nível principal do JSON (fora do 'body').\n====================================*/\n// Faz uma cópia do item original para evitar mutação direta\nconst outputItem = { ...item.json };\n\n// Cria o objeto com os resultados do processamento\nconst switchProcessor = {\n  eventType: eventType,\n  discardReason: discardReason\n};\n\n// Adiciona o objeto 'switchProcessor' ao nível principal do item\noutputItem.switchProcessor = switchProcessor;\n\n// Retorna o item original modificado\nreturn [{\n  json: outputItem\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        -704
      ],
      "id": "e4b517c5-5100-4291-89c1-6f9a21bd6294",
      "name": "Switch Processor"
    },
    {
      "parameters": {
        "jsCode": "/*====================================\n INICIALIZAÇÃO E EXTRAÇÃO DE DADOS\n Extrai todos os dados necessários do corpo\n do webhook para variáveis legíveis e seguras.\n====================================*/\nconst item = items[0];\nconst body = item.json.body || {};\n\n/*====================================\n MONTAGEM DA SAÍDA\n Cria o objeto 'switchProcessor' e o insere\n no nível principal do JSON (fora do 'body').\n====================================*/\n// Faz uma cópia do item original para evitar mutação direta\nconst outputItem = { ...item.json };\n\n// Cria o objeto com os resultados do processamento\nconst switchProcessor = {\n  eventType: \"BASEROW_ROWS_UPDATED\"\n};\n\n// Adiciona o objeto 'switchProcessor' ao nível principal do item\noutputItem.switchProcessor = switchProcessor;\n\n// Retorna o item original modificado\nreturn [{\n  json: outputItem\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        -944
      ],
      "id": "58e40876-a169-48d3-b7da-027970100bb9",
      "name": "Switch Processor - Baserow"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "yib-uazapi-receptor-TOchatwoot-PROD",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -656,
        -704
      ],
      "id": "6aab8ad0-2957-4da4-ac30-73702409a0d8",
      "name": "Uazapi Webhook",
      "webhookId": "a80675e2-06d3-4789-82f3-6f54c9b1134f"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "PORwoJguuqvS9Qb4",
          "mode": "list",
          "cachedResultName": "MAIN - Uzapi receptor (TOchatwoot)"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        0,
        -848
      ],
      "id": "10e6125f-38ba-4f60-8449-3013e57e0fdd",
      "name": "Execute Workflow"
    }
  ],
  "connections": {
    "Baserow Webhook": {
      "main": [
        [
          {
            "node": "Switch Processor - Baserow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [],
        [
          {
            "node": "Discarded event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Processor": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Processor - Baserow": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi Webhook": {
      "main": [
        [
          {
            "node": "Switch Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "b780b69c87731f6ce3bc879be6a4e1433ff4eb49ccba6717e96bdd4d992b279a"
  }
}
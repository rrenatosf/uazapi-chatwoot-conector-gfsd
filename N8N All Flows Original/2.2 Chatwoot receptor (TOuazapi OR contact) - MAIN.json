{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "yib-chatwoot-receptor-TOuazapi-PROD",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -608,
        192
      ],
      "id": "f6a083b9-b04d-4f75-8cd5-99cf83d48a57",
      "name": "Webhook",
      "webhookId": "76ca716c-5996-4778-b8f1-f30a6fd6f7c0"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "DAXYAZARmSFEXuHj",
          "mode": "list",
          "cachedResultName": "MAIN - Chatwoot receptor (TOuazapi/contact)"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1280,
        -112
      ],
      "id": "ae5f6116-a54e-4b0a-b071-388b7c05b629",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "={{ $json.switchProcessor.originalEvent }} - {{ $json.switchProcessor.discardReason }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        384,
        624
      ],
      "id": "275060eb-338f-41f3-830a-843930b3a4db",
      "name": "Execution Data"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "=Send do processor! ({{ $('Switch Processor').item.json.switchProcessor.eventType }}) - cw_to_uz_queue:{{ $('Webhook').item.json.query.installation_url.split('//')[1].replace(':','Port').replace(/\\./g, '_').replace(/-/g, '_').replace(/_com_br/g, '_br') }}:acc{{ $('Nml - Inbox Event').item.json.extra.accountId }}:i{{ $('Nml - Inbox Event').item.json.extra.contac_inbox.inbox_id }}:{{ $('Nml - Inbox Event').item.json.extra.conversationId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        1456,
        -112
      ],
      "id": "d8d9e422-78f0-4dd8-ae3a-2a92e7a05f74",
      "name": "Execution Data1"
    },
    {
      "parameters": {
        "jsCode": "const { createClient } = require('redis');\n\nvar input = $('Switch Processor').first().json;\n\nconst client = createClient({\n  socket: {\n    host: 'redis',\n    port: 6379\n  },\n  database: 10\n});\n\ntry {\n  await client.connect();\n\n  const queueKey = $('RedisKeys').first().json.queueKey;\n  const lockKey = $('RedisKeys').first().json.lockKey;\n  \n  // Cria o payload com queueKey e lockKey no topo\n  var payload = {\n    queueKey: queueKey,\n    lockKey: lockKey,\n    ...input  // Espalha o resto do input após as chaves\n  };\n\n  //if (!chatId) {\n    //throw new Error('Não foi possível extrair o chatId do input.');\n  //}\n\n  payload = JSON.stringify(payload);\n  //const payload = JSON.stringify(input); // 3. O payload é o input inteiro em string.\n  \n  // Executa o comando RPUSH\n  const pushResult = await client.rPush(queueKey, payload);\n\n  // Anexa o resultado ao input original para passar para o próximo nó\n  //data.rpushResult = `Fila [${queueKey}] agora com ${pushResult} itens.`;\n  $input.item.json.rpushResult = `Fila [${queueKey}] agora com ${pushResult} itens`;\n  \n} catch (error) {\n  throw error;\n} finally {\n  if (client.isOpen) {\n    await client.quit();\n  }\n}\n\n//return [{ json: data }];\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        -32
      ],
      "id": "4c1d1773-af4d-4f1c-92b2-f2ed393aba11",
      "name": "Redis - Rpush"
    },
    {
      "parameters": {
        "jsCode": "const { createClient } = require('redis');\n\nconst client = createClient({\n  socket: {\n    host: 'redis',\n    port: 6379\n  },\n  database: 10\n});\n\ntry {\n  await client.connect();\n\n  //if (!chatId) {\n    //throw new Error('Não foi possível extrair o chatId do input.');\n  //}\n\n  const lockKey = $('RedisKeys').first().json.lockKey;\n  const expirationInSeconds = 36000; // 10h\n\n  // Tenta criar a trava. Retorna 'OK' se foi criada, ou null se já existia.\n  const lockStatus = await client.set(lockKey, 'running', {\n    NX: true,\n    EX: expirationInSeconds\n  });\n\n  $input.item.json.lockStatus = lockStatus;\n\n} catch (error) {\n  throw error;\n} finally {\n  if (client.isOpen) {\n    await client.quit();\n  }\n}\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        736,
        -32
      ],
      "id": "2d2e3ba3-e786-4889-8a0d-f33b60afd215",
      "name": "Redis - Lock NX"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "423e9228-c3fa-4aab-97c3-3f936028db45",
              "leftValue": "={{ $('Redis - Lock NX').item.json.lockStatus }}",
              "rightValue": "OK",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        912,
        -32
      ],
      "id": "ff0e9f15-61dc-4820-b982-2c91b4bc1cf4",
      "name": "Lock Created Now?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2db8d033-d4ea-4bfc-be47-7e6ca4060cdc",
              "name": "queueKey",
              "value": "=cw_to_uz_queue:acc{{ $('Nml - Inbox Event').item.json.extra.accountId }}:i{{ $('Nml - Inbox Event').item.json.extra.contac_inbox.inbox_id }}:{{ $('Nml - Inbox Event').item.json.toSend.body.conversation.meta.sender.identifier.split(\"@\")[0] }}",
              "type": "string"
            },
            {
              "id": "e465a87a-d104-4ee0-b731-c23f3f20c114",
              "name": "lockKey",
              "value": "=lock:cw_to_uz_process:acc{{ $('Nml - Inbox Event').item.json.extra.accountId }}:i{{ $('Nml - Inbox Event').item.json.extra.contac_inbox.inbox_id }}:{{ $('Nml - Inbox Event').item.json.toSend.body.conversation.meta.sender.identifier.split(\"@\")[0] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        384,
        -32
      ],
      "id": "bbd4dd26-9936-4b8a-bb9b-c0c784e4696d",
      "name": "RedisKeys"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $('RedisKeys').item.json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1104,
        -112
      ],
      "id": "fc259f87-ce78-434e-a8b5-685ad2c13a7c",
      "name": "InputKeys"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        384,
        -224
      ],
      "id": "e155f956-b6d2-454b-a147-93f1a9e0d14a",
      "name": "Organizer"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        912,
        -224
      ],
      "id": "1fbb5677-9740-4a0c-b763-bb5c5ec30039",
      "name": "Organizer1"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "=WITH LOCK! Rpushed! ({{ $('RedisKeys').first().json.queueKey }})"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        1456,
        64
      ],
      "id": "dac81e7f-3972-4d5b-9dec-f9157e869375",
      "name": "Just push (no trigger!)"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "da87fc93-2e68-4e18-9d5b-6e77a19c229e",
                    "leftValue": "={{ $('Switch Processor').item.json.switchProcessor.eventType }}",
                    "rightValue": "TYPING_EVENT",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "typing_event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a82434d6-9bb2-4c9a-89ac-a09f24e93c0e",
                    "leftValue": "={{ $('Switch Processor').item.json.switchProcessor.eventType.includes('VALID_OUTGOING') || $('Switch Processor').item.json.switchProcessor.eventType === 'REACTION'  }}",
                    "rightValue": "VALID_OUTGOING_MESSAGE",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "valid_outgoing"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dadaa8be-ec91-4e7d-b984-5c06c84693c8",
                    "leftValue": "={{ $('Switch Processor').item.json.switchProcessor.eventType }}",
                    "rightValue": "DELETED_MESSAGE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "deleted_message"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1c3ac1f4-5dad-4059-89f1-507792f997c4",
                    "leftValue": "={{ $('Switch Processor').item.json.switchProcessor.eventType }}",
                    "rightValue": "SYSTEM_COMMAND",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "sys_command"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "68d03412-e249-4a8a-98b9-d3a00c110707",
                    "leftValue": "={{ $('Switch Processor').item.json.switchProcessor.eventType }}",
                    "rightValue": "DISCARD",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "discard"
            }
          ]
        },
        "options": {
          "fallbackOutput": "none"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        0,
        144
      ],
      "id": "c51e0f36-8051-4ed4-8b4a-2f1c59aaf756",
      "name": "Switch"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        384,
        192
      ],
      "id": "18ee94a5-178a-4edf-9b3b-bf961b665b7e",
      "name": "Organizer2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        736,
        192
      ],
      "id": "4ede8499-d13f-4121-9dcc-efaea72026d9",
      "name": "Organizer3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2db8d033-d4ea-4bfc-be47-7e6ca4060cdc",
              "name": "queueKey",
              "value": "=cw_to_uz_queue:acc{{ $('Nml - Inbox Event').item.json.extra.accountId }}:i{{ $('Nml - Inbox Event').item.json.extra.contac_inbox.inbox_id }}:{{ $('Nml - Inbox Event').item.json.toSend.body.conversation.meta.sender.identifier.split(\"@\")[0] }}",
              "type": "string"
            },
            {
              "id": "e465a87a-d104-4ee0-b731-c23f3f20c114",
              "name": "lockKey",
              "value": "=lock:cw_to_uz_process:acc{{ $('Nml - Inbox Event').item.json.extra.accountId }}:i{{ $('Nml - Inbox Event').item.json.extra.contac_inbox.inbox_id }}:{{ $('Nml - Inbox Event').item.json.toSend.body.conversation.meta.sender.identifier.split(\"@\")[0] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        384,
        400
      ],
      "id": "6e1dc7e0-92c7-455b-978c-9fe27b56a1dc",
      "name": "RedisKeys2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ { \n...$('RedisKeys2').item.json,\n...$('Switch Processor').item.json\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        736,
        400
      ],
      "id": "62fdef79-81db-4a19-8bdc-0b412a8ca40a",
      "name": "Merge Keys with Data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "aaed199a-6998-4e11-87b5-af38796cc16f",
              "name": "check.body.private",
              "value": "={{ $('Webhook').item.json.body.private }}",
              "type": "boolean"
            },
            {
              "id": "93b7814e-2f4c-4eac-87af-2d2fbe50300f",
              "name": "check.body.conversation.messages[0].source_id",
              "value": "={{ $('Webhook').item.json.body.conversation.messages[0].source_id }}",
              "type": "string"
            },
            {
              "id": "1a80a308-2871-45b3-a1c2-f853f093b0c7",
              "name": "check.body.content_attributes.deleted",
              "value": "={{ $('Webhook').item.json.body.content_attributes.deleted }}",
              "type": "boolean"
            },
            {
              "id": "fd0d10c1-e5f1-4a5c-b700-e88acade05f9",
              "name": "check.body.event",
              "value": "={{ $('Webhook').item.json.body.event }}",
              "type": "string"
            },
            {
              "id": "54d5960a-6caa-405b-9084-05ea25d602ea",
              "name": "toSend.body.conversation.meta.sender.identifier",
              "value": "={{ $('Webhook').item.json.body.conversation.meta.sender.identifier ?? $('Webhook').item.json.body.conversation.meta.sender.phone_number.replace(/\\D/g, ''); }}",
              "type": "string"
            },
            {
              "id": "6104d651-152c-4110-92d4-e682cea532cb",
              "name": "toSend.body.content",
              "value": "={{ $('Webhook').item.json.body.content }}",
              "type": "string"
            },
            {
              "id": "9f207a55-68ee-4cdd-92bc-caf527498bdf",
              "name": "toSend.body.attachments",
              "value": "={{ $json.body.attachments }}",
              "type": "array"
            },
            {
              "id": "d59076c3-b915-40b5-8906-48f6eba9006d",
              "name": "toSend.body.content_attributes.in_reply_to",
              "value": "={{ $('Webhook').item.json.body.content_attributes.in_reply_to }}",
              "type": "string"
            },
            {
              "id": "ca92eb77-4058-4552-bf07-eb838866cec4",
              "name": "toSend.body.conversation.messages[0].sender.available_name",
              "value": "={{ $('Webhook').item.json.body.conversation.messages[0].sender.available_name }}",
              "type": "string"
            },
            {
              "id": "2508e313-0538-4f8a-8541-0f542a146cee",
              "name": "extra.installationUrl",
              "value": "={{ $('Webhook').item.json.query.installation_url }}",
              "type": "string"
            },
            {
              "id": "9d7480de-d242-4e5a-a944-86f2ca6d531c",
              "name": "extra.accountId",
              "value": "={{ $('Webhook').item.json.body.account?.id || $('Webhook').item.json.body.conversation.messages[0].account_id }}",
              "type": "number"
            },
            {
              "id": "4d1ab84d-b0f0-4063-bc67-836d2b102539",
              "name": "extra.contac_inbox.source_id",
              "value": "={{ $('Webhook').item.json.body.conversation.contact_inbox.source_id }}",
              "type": "string"
            },
            {
              "id": "33c442e7-424f-44cf-a4b6-ef0a81dbfb19",
              "name": "extra.contac_inbox.contact_id",
              "value": "={{ $('Webhook').item.json.body.conversation.contact_inbox.contact_id }}",
              "type": "number"
            },
            {
              "id": "59afcb3e-1ef7-445d-8f56-fee3aff89d1d",
              "name": "extra.contac_inbox.inbox_id",
              "value": "={{ $('Webhook').item.json.body.conversation.contact_inbox.inbox_id }}",
              "type": "number"
            },
            {
              "id": "041f984e-4441-4b77-94fe-2850134a7e1c",
              "name": "extra.conversationId",
              "value": "={{ $('Webhook').item.json.body.conversation.id }}",
              "type": "number"
            },
            {
              "id": "018178b1-dd6b-4b72-aa58-38483bc78ef5",
              "name": "extra.messageId",
              "value": "={{ $('Webhook').item.json.body.id }}",
              "type": "number"
            },
            {
              "id": "b499638b-3a6b-4dc6-8896-d548e8438d68",
              "name": "extra.contactName",
              "value": "={{ $('Webhook').item.json.body.conversation.meta.sender.name }}",
              "type": "string"
            },
            {
              "id": "ff58c632-ebd5-4f55-9302-57003de7c7f6",
              "name": "sender.type",
              "value": "={{ $('Webhook').item.json.body.sender.type }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -400,
        192
      ],
      "id": "edda7b81-5140-4c22-aaa1-1c78c521551b",
      "name": "Nml - Inbox Event"
    },
    {
      "parameters": {
        "jsCode": "/*====================================\n FUNÇÃO AUXILIAR\n Função reutilizável para detectar se um\n texto contém apenas um único emoji.\n====================================*/\nfunction isSingleEmoji(text) {\n  const trimmed = text.trim();\n  const segments = [...new Intl.Segmenter('pt-BR', { granularity: 'grapheme' }).segment(trimmed)];\n\n  if (segments.length !== 1) {\n    return false;\n  }\n\n  // Emojis normais (Extended Pictographic + modificadores/ZWJ)\n  const pictographicRegex = /^(?:\\p{Extended_Pictographic}(?:\\uFE0F|\\u200D\\p{Extended_Pictographic})*)$/u;\n\n  // Keycap sequence (números 0–9, # e *)\n  const keycapRegex = /^([0-9#*]\\uFE0F?\\u20E3)$/u;\n\n  return pictographicRegex.test(trimmed) || keycapRegex.test(trimmed);\n}\n\n\n\n\n/*====================================\n INICIALIZAÇÃO E EXTRAÇÃO DE DADOS\n====================================*/\nconst item = items[0];\n\nconst senderType = item.json.sender?.type;\nconst event = item.json.check?.body?.event;\nconst isPrivate = item.json.check?.body?.private === true;\nconst isDeleted = item.json.check?.body?.content_attributes?.deleted === true;\nconst sourceId = item.json.check?.body?.conversation?.messages?.[0]?.source_id;\nconst content = item.json.toSend?.body?.content;\nconst attachments = item.json.toSend?.body?.attachments;\n// Nova constante para verificar se a mensagem é uma resposta.\nconst isReply = !!item.json.toSend?.body?.content_attributes?.in_reply_to;\n\n// Variáveis para armazenar o resultado do processamento\nlet eventType = '';\nlet discardReason = '';\nlet command = null;\nlet reactionEmoji = null;\n\n\n/*====================================\n LÓGICA DE ROTEAMENTO CORRIGIDA\n====================================*/\n\n// CAMADA 1: Tratamento de Caso Especial (Evento de Typing)\nif ((event === 'conversation_typing_on' || event === 'conversation_typing_off') && !isPrivate) {\n  eventType = 'TYPING_EVENT';\n} else {\n  // Para todos os outros eventos, aplicamos os filtros padrão.\n\n  // CAMADA 2: Filtro de Direção\n  if (senderType !== 'user') {\n    eventType = 'DISCARD';\n    discardReason = 'Event is not typing and is incoming (sender is not user)';\n  } else {\n    // É um evento de 'user' (e não é de typing).\n\n    // CAMADA 3: Filtro de Duplicidade\n    const isWhatsappDuplicate = sourceId && sourceId.split(':')[0] === 'MID';\n    if (isWhatsappDuplicate && !isDeleted) { //Apagadas eu tenho que deixar passar pra conseguir apagar uma mensagem criada no celular pelo Chatwoot\n      eventType = 'DISCARD';\n      discardReason = 'Duplicate event from WhatsApp (source_id starts with MID)';\n    } else {\n      // CAMADA 4: Classificação Final ou Validação de Conteúdo\n      if (event === 'message_created') {\n        const hasTextContent = content && typeof content === 'string' && content.trim() !== '';\n        const hasAttachments = attachments && attachments.length > 0;\n\n        // Descarte prioritário para mensagens de sistema\n        if (hasTextContent && content.startsWith('**SYSTEM:**')) {\n          eventType = 'DISCARD';\n          discardReason = 'Internal system message (starts with *SYSTEM:*)';\n        } else if (isPrivate) {\n          eventType = 'DISCARD';\n          discardReason = 'Message is private';\n        } else if (hasTextContent) {\n          if (content.startsWith('..')) {\n            eventType = 'SYSTEM_COMMAND';\n            command = content.substring(2).trim();\n          } else if (isReply && isSingleEmoji(content.trim())) { // Condição ajustada para incluir a verificação 'isReply'\n            eventType = 'REACTION';\n            reactionEmoji = content.trim(); // Armazena o emoji para ser usado depois\n          } else {\n            // Se tem texto, verificamos se também tem anexo para classificar.\n            eventType = hasAttachments ? 'VALID_OUTGOING_MEDIA' : 'VALID_OUTGOING_TEXT';\n          }\n        } else if (hasAttachments) {\n          // Se só tem anexo (sem texto), é mídia.\n          eventType = 'VALID_OUTGOING_MEDIA';\n        } else {\n          // Mensagem sem texto nem anexo\n          eventType = 'DISCARD';\n          discardReason = 'New message has no content or attachments';\n        }\n\n      } else if (event === 'message_updated' && isDeleted && !isPrivate) {\n        eventType = 'DELETED_MESSAGE';\n      } else {\n        eventType = 'DISCARD';\n        discardReason = 'Unhandled user event type';\n      }\n    }\n  }\n}\n\n\n/*====================================\n MONTAGEM DA SAÍDA\n O objeto 'switchProcessor' agora é montado\n dinamicamente para incluir apenas as chaves relevantes.\n====================================*/\nconst outputItem = { ...item.json };\n\n// Base do objeto de processamento\nconst switchProcessor = {\n  eventType: eventType,\n  originalEvent: event || 'unknown'\n};\nif (eventType === 'DISCARD') {\n  switchProcessor.discardReason = discardReason;\n}\nif (eventType === 'SYSTEM_COMMAND') {\n  switchProcessor.command = command;\n}\nif (eventType === 'REACTION') {\n  switchProcessor.reaction = reactionEmoji;\n}\n\noutputItem.switchProcessor = switchProcessor;\n\nreturn [{\n  json: outputItem\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        192
      ],
      "id": "b4d88a10-45f1-4e9b-9e59-16037b30f480",
      "name": "Switch Processor"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Nml - Inbox Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Execution Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis - Rpush": {
      "main": [
        [
          {
            "node": "Redis - Lock NX",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis - Lock NX": {
      "main": [
        [
          {
            "node": "Lock Created Now?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lock Created Now?": {
      "main": [
        [
          {
            "node": "InputKeys",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Just push (no trigger!)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RedisKeys": {
      "main": [
        [
          {
            "node": "Redis - Rpush",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InputKeys": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organizer": {
      "main": [
        [
          {
            "node": "Organizer1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organizer1": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Organizer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "RedisKeys",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organizer2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "RedisKeys2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execution Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organizer2": {
      "main": [
        [
          {
            "node": "Organizer3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organizer3": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RedisKeys2": {
      "main": [
        [
          {
            "node": "Merge Keys with Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Keys with Data": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - Inbox Event": {
      "main": [
        [
          {
            "node": "Switch Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Processor": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Webhook": [
      {
        "headers": {
          "host": "n8nwebhook.yearsinbox.com",
          "user-agent": "rest-client/2.1.0 (linux-musl x86_64) ruby/3.4.4p34",
          "content-length": "3272",
          "accept": "application/json",
          "accept-encoding": "gzip;q=1.0,deflate;q=0.6,identity;q=0.3",
          "content-type": "application/json",
          "x-forwarded-for": "172.18.0.1",
          "x-forwarded-host": "n8nwebhook.yearsinbox.com",
          "x-forwarded-port": "443",
          "x-forwarded-proto": "https",
          "x-forwarded-server": "c0e5dac5790b",
          "x-real-ip": "172.18.0.1"
        },
        "params": {},
        "query": {
          "installation_url": "http://chatwoot_app:3000"
        },
        "body": {
          "account": {
            "id": 17,
            "name": "TeT Cursos"
          },
          "additional_attributes": {},
          "content_attributes": {},
          "content_type": "text",
          "content": "\r\nolá bom dia me chamo Ellen França, e vou está dando inicio ao seu atendimento💙❤️\r\n\r\n\r\n",
          "conversation": {
            "additional_attributes": {},
            "can_reply": true,
            "channel": "Channel::Api",
            "contact_inbox": {
              "id": 56435,
              "contact_id": 32383,
              "inbox_id": 49,
              "source_id": "19706fd8-a2d9-4a8c-a483-b81195629b54",
              "created_at": "2025-08-26T14:47:49.515Z",
              "updated_at": "2025-08-26T14:47:49.515Z",
              "hmac_verified": false,
              "pubsub_token": "TmSvFJGN2CPUf3aGiNP6M5YN"
            },
            "id": 13829,
            "inbox_id": 49,
            "messages": [
              {
                "id": 1175799,
                "content": "\r\nolá bom dia me chamo Ellen França, e vou está dando inicio ao seu atendimento💙❤️\r\n\r\n\r\n",
                "account_id": 17,
                "inbox_id": 49,
                "conversation_id": 13829,
                "message_type": 1,
                "created_at": 1756219963,
                "updated_at": "2025-08-26T14:52:43.182Z",
                "private": false,
                "status": "sent",
                "source_id": null,
                "content_type": "text",
                "content_attributes": {},
                "sender_type": "User",
                "sender_id": 19,
                "external_source_ids": {},
                "additional_attributes": {},
                "processed_message_content": "\r\nolá bom dia me chamo Ellen França, e vou está dando inicio ao seu atendimento💙❤️\r\n\r\n\r\n",
                "sentiment": {},
                "conversation": {
                  "assignee_id": null,
                  "unread_count": 0,
                  "last_activity_at": 1756219963,
                  "contact_inbox": {
                    "source_id": "19706fd8-a2d9-4a8c-a483-b81195629b54"
                  }
                },
                "attachments": [
                  {
                    "id": 179873,
                    "message_id": 1175799,
                    "file_type": "audio",
                    "account_id": 17,
                    "extension": null,
                    "data_url": "http://masterfusion.yearsinbox.com/rails/active_storage/blobs/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBL0pRQlE9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--b29eabd87fda0127ea4552d4597e2201a3045f7b/c97b583b4764.mp3",
                    "thumb_url": "",
                    "file_size": 105984,
                    "width": null,
                    "height": null,
                    "transcribed_text": ""
                  }
                ],
                "sender": {
                  "id": 19,
                  "name": "Ellen França",
                  "available_name": "Sec. Ellen França",
                  "avatar_url": "",
                  "type": "user",
                  "availability_status": null,
                  "thumbnail": ""
                }
              }
            ],
            "labels": [
              "1_aguardando-atendimento"
            ],
            "meta": {
              "sender": {
                "additional_attributes": {},
                "custom_attributes": {},
                "email": null,
                "id": 32383,
                "identifier": "559391940553@s.whatsapp.net",
                "name": "~Mannu~",
                "phone_number": "+559391940553",
                "thumbnail": "",
                "blocked": false,
                "type": "contact"
              },
              "assignee": null,
              "team": null,
              "hmac_verified": false
            },
            "status": "open",
            "custom_attributes": {},
            "snoozed_until": null,
            "unread_count": 0,
            "first_reply_created_at": null,
            "priority": null,
            "waiting_since": 1756219669,
            "agent_last_seen_at": 1756219963,
            "contact_last_seen_at": 0,
            "last_activity_at": 1756219963,
            "timestamp": 1756219963,
            "created_at": 1756219669,
            "updated_at": 1756219963.184402
          },
          "created_at": "2025-08-26T14:52:43.182Z",
          "id": 1175799,
          "inbox": {
            "id": 49,
            "name": "Whatsapp 01"
          },
          "message_type": "outgoing",
          "private": false,
          "sender": {
            "id": 19,
            "name": "Ellen França",
            "email": "tetcursosatendimento02@gmail.com",
            "type": "user"
          },
          "source_id": null,
          "attachments": [
            {
              "id": 179873,
              "message_id": 1175799,
              "file_type": "audio",
              "account_id": 17,
              "extension": null,
              "data_url": "http://masterfusion.yearsinbox.com/rails/active_storage/blobs/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBL0pRQlE9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--b29eabd87fda0127ea4552d4597e2201a3045f7b/c97b583b4764.mp3",
              "thumb_url": "",
              "file_size": 105984,
              "width": null,
              "height": null,
              "transcribed_text": ""
            }
          ],
          "event": "message_created"
        },
        "webhookUrl": "https://n8nwebhook.yearsinbox.com/webhook/yib-chatwoot-receptor-TOuazapi-PROD",
        "executionMode": "production"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b780b69c87731f6ce3bc879be6a4e1433ff4eb49ccba6717e96bdd4d992b279a"
  }
}
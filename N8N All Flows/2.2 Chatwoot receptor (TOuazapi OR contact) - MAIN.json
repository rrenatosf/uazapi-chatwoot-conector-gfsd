{
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -4496,
        128
      ],
      "id": "219e66a0-ae6d-4b1f-8c54-30b5b8a2c077",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -4112,
        -400
      ],
      "id": "e909d057-0ef5-4052-b9b4-ffac476a1b79",
      "name": "When clicking ‘Execute workflow’",
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cec82ea9-82fb-4aa7-8f9d-6c0424afe3a1",
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor.eventType }}",
                    "rightValue": "TYPING_EVENT",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Typing Event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "df37d6e6-d2f1-45e7-a2b4-a9f755c34321",
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor.eventType }}",
                    "rightValue": "DELETED_MESSAGE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Deletion"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7fe9ec75-f2f1-4cf7-ab94-a9d16545c7d7",
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor.eventType }}",
                    "rightValue": "SYSTEM_COMMAND",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Command"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "57b39e1f-1f4e-415f-a88f-fa028b1bcf2c",
                    "leftValue": "={{ $('Redis - Queue Processor').isExecuted ? $('Redis - Queue Processor').item.json.switchProcessor.eventType : '' }}",
                    "rightValue": "REACTION",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Reaction"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "386065de-62c2-4404-ad68-6dc5301794d6",
                    "leftValue": "={{ $('Redis - Queue Processor').isExecuted \n    ? $('Redis - Queue Processor').item.json.switchProcessor.eventType \n    : '' }}",
                    "rightValue": "VALID_OUTGOING_TEXT",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Redis - Queue Processor').isExecuted \n    ? $('Redis - Queue Processor').item.json.switchProcessor.eventType \n    : '' }}",
                    "rightValue": "VALID_OUTGOING_MEDIA",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "1d706489-3a54-4088-a2e0-30713981692b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Attachment"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -416,
        208
      ],
      "id": "a270916e-178f-4594-92e4-3e2412b00a82",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "=api:instance:{{ $('Get Inbox Token').item.json.data || $('Nml - Instance Token to Cache').item.json.data }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2208,
        320
      ],
      "id": "a5ccb954-852e-4380-ada8-1229fd6dd02a",
      "name": "Get Instance Chatwoot Data",
      "credentials": {
        "redis": {
          "id": "LK9rDtqYoR5e5wVE",
          "name": "Conector Chatwoot | GFSD | DB10"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $('Get Instance Chatwoot Data').item.json.data }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2000,
        320
      ],
      "id": "1c039079-7fb0-4afe-9a2f-ceeb858f6fbf",
      "name": "Nml - Instance Chatwoot Cached Data"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('Redis Keys').item.json.redisKey.split('//')[1].replace(':','Port').replace(/\\./g, '_').replace(/-/g, '_').replace(/_com_br/g, '_br') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2608,
        192
      ],
      "id": "e018f0bb-b25e-48d1-b271-a223d14309a3",
      "name": "Get Inbox Token",
      "credentials": {
        "redis": {
          "id": "LK9rDtqYoR5e5wVE",
          "name": "Conector Chatwoot | GFSD | DB10"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "29933430-de0f-47d5-ad7c-3b03ab55bae7",
              "leftValue": "={{ $('Get Inbox Token').item.json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2432,
        192
      ],
      "id": "2e91ad38-aae2-4fa9-943e-219e49600df7",
      "name": "No data?1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "256ddb1b-d5d4-4310-a2fb-4599d80ab4c8",
              "name": "redisKey",
              "value": "={{ $('Mrg - Input Data').item.json.extra.installationUrl }}:token:acc{{ $('Mrg - Input Data').item.json.extra.accountId }}:i{{ $('Mrg - Input Data').item.json.extra.contac_inbox.inbox_id }}",
              "type": "string"
            },
            {
              "id": "f2891878-0192-47e2-b88a-67c7034f081e",
              "name": "inboxKey",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2608,
        0
      ],
      "id": "75d294f6-9fc3-4119-ab86-bd0b1b1a71c2",
      "name": "Redis Keys"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "47d2f24b-4884-4ec1-aeb0-da819727d746",
              "leftValue": "={{ $('Filter By Inbox ID').item.json[\"Chatwoot Account Id\"].toNumber() }}",
              "rightValue": "={{ $('Mrg - Input Data').item.json.extra.accountId }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -2032,
        64
      ],
      "id": "1533cffe-326d-4e93-ae5d-a7de72ee7428",
      "name": "Filter By Account Id",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Redis Keys').item.json.redisKey.split('//')[1].replace(':','Port').replace(/\\./g, '_').replace(/-/g, '_').replace(/_com_br/g, '_br') }}",
        "value": "={{ $('Nml - Instance Token to Cache').item.json.data }}",
        "expire": true,
        "ttl": 2592000
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1472,
        80
      ],
      "id": "9e7d5e7b-62d0-4ffb-9cb6-5e51ab1fecdb",
      "name": "Cache Inbox Token (30D)",
      "credentials": {
        "redis": {
          "id": "LK9rDtqYoR5e5wVE",
          "name": "Conector Chatwoot | GFSD | DB10"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "14d5054c-2f2b-4feb-8357-bead61bc7519",
              "leftValue": "={{ $('Filter By Account Id').item.json['Instance Token'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1856,
        64
      ],
      "id": "796ea140-aa4c-41e4-ad67-52f1c9e46f65",
      "name": "No data?2"
    },
    {
      "parameters": {
        "content": "### Dados da instância indisponíveis",
        "height": 96,
        "width": 288
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1536,
        -64
      ],
      "typeVersion": 1,
      "id": "3c3783c2-3b71-4ea3-b1e8-78fd479fe0b7",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "784a37e2-c5d3-4bcf-822a-96998e5d7ab7",
              "name": "=data",
              "value": "={{ $('Filter By Account Id').item.json['Instance Token'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1648,
        80
      ],
      "id": "5c938a01-1460-4f7c-b6d9-353cc8208780",
      "name": "Nml - Instance Token to Cache"
    },
    {
      "parameters": {
        "content": "# Get API Token",
        "height": 592,
        "width": 1344,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2656,
        -96
      ],
      "typeVersion": 1,
      "id": "be6c529c-084e-4178-8d0b-ddd6f7ab8c33",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceUrl }}/send/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('Nml - Inbox Event').item.json.message.chatId }}\",\n  \"text\": {{ $('Nml - Inbox Event').item.json.message.content.toJsonString() }},\n  \"readchat\": true\n  {{\n      $('Nml - Inbox Event').item.json.message.inReplyTo.isReply && \n        $('Execute a SQL query').item.json.stanza_id ? \n      ',\"replyid\": \"' + $('Execute a SQL query').item.json.stanza_id.replace('MID:','') + '\"' : ''\n  }}\n}\n\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -144,
        224
      ],
      "id": "34aeb57a-e82f-4ea6-a867-95ff4c6a4ae7",
      "name": "Uazapi - Send Text"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ $('Mrg - Input Data').item.json.extra.installationUrl }}/api/v1/accounts/{{ $('Mrg - Input Data').item.json.extra.accountId }}/conversations/{{ $('Mrg - Input Data').item.json.extra.conversationId }}/messages/{{ $('Mrg - Input Data').item.json.extra.messageId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.userToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{ \"status\": \"delivered\"}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        928,
        224
      ],
      "id": "9d340158-33d2-46bc-bb6b-528c6784414d",
      "name": "Message status - Delivered",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=MID:{{ $('Mrg - Message Data').item.json.messageid }}:TYPE",
        "value": "=text",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        752,
        224
      ],
      "id": "2c74cd4d-18e4-4918-89e0-16b34a8450c7",
      "name": "Cache MESSAGE type key",
      "credentials": {
        "redis": {
          "id": "LK9rDtqYoR5e5wVE",
          "name": "Conector Chatwoot | GFSD | DB10"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=MID:{{ $('Uazapi - Send Text').isExecuted ? $('Uazapi - Send Text').item.json.messageid : $('Uazapi - Send Media').item.json.messageid }}",
        "value": "={\"id\":{{ $('Mrg - Input Data').item.json.extra.messageId }},\"status\":\"delivered\",\"cvsId\":{{ $('Mrg - Input Data').item.json.extra.conversationId }}}",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1104,
        224
      ],
      "id": "eb01cb01-b5c0-4c63-988e-30ccb746137b",
      "name": "Cache message (As Delivered!)",
      "credentials": {
        "redis": {
          "id": "LK9rDtqYoR5e5wVE",
          "name": "Conector Chatwoot | GFSD | DB10"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceUrl }}/send/media",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('Nml - Inbox Event').item.json.message.chatId }}\",\n  {{\n    $('Nml - Inbox Event').item.json.message.content\n      ? `\"text\": \"${$('Nml - Inbox Event').item.json.message.content}\",`\n      : ''\n  }}\n  \"type\": \"{{ \n  (() => {\n    const type = $('Nml - Inbox Event').item.json.message.attachments.content[0].type;\n    const typeMap = {\n      \"file\": \"document\",\n      \"audio\": \"ptt\"\n    };\n    return typeMap[type] || type;\n  })() \n}}\",\n  \"file\": \"{{ $('Split Out').item.json.attachment.url }}\",\n  \"readchat\": true\n  {{\n      $('Nml - Inbox Event').item.json.message.inReplyTo.isReply && \n        $('Execute a SQL query').item.json.stanza_id ? \n      ',\"replyid\": \"' + $('Execute a SQL query').item.json.stanza_id.replace('MID:','') + '\"' : ''\n  }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        176,
        976
      ],
      "id": "cfccad20-d3f9-4171-b0f3-95276a162dfa",
      "name": "Uazapi - Send Media",
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        32,
        512
      ],
      "id": "1c0fd11d-2835-4221-b18b-2cce15554771",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "fieldToSplitOut": "message.attachments.content",
        "options": {
          "destinationFieldName": "attachment"
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -144,
        512
      ],
      "id": "5bdb8332-18e5-484c-bba2-cdc4666b689d",
      "name": "Split Out"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2b089170-dfc1-48a4-919d-1af997c2c7a0",
              "leftValue": "={{ $('Redis - Queue Processor').item.json.toSend }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3136,
        192
      ],
      "id": "e2e1c980-5fe0-421a-9964-717ac121a9df",
      "name": "Has Items?"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "Queue finished!"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        -3152,
        416
      ],
      "id": "e37bc289-cc4a-4f83-b6be-0f034e99f58f",
      "name": "Execution Data"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=lock:cw_to_uz_process:acc1:i10:558597096994"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3488,
        576
      ],
      "id": "87d30687-a7ab-4b1e-8392-f34d0038eec2",
      "name": "Liberar Lock",
      "credentials": {
        "redis": {
          "id": "LK9rDtqYoR5e5wVE",
          "name": "Conector Chatwoot | GFSD | DB10"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "VwuLstvzkoVWDxUK",
          "mode": "list",
          "cachedResultName": "(test) MAIN - Chatwoot receptor (TOuazapi/contact)"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2352,
        -16
      ],
      "id": "dffcf654-cb7e-447b-a867-227cba93dbed",
      "name": "Execute Workflow",
      "disabled": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $('When Executed by Another Workflow').first().json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2304,
        240
      ],
      "id": "4406bef4-60b4-43bf-8258-a4bf59684bdb",
      "name": "InputKeys"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -2848,
        176
      ],
      "id": "4a156720-6d20-49f9-baf7-87e47ac0a099",
      "name": "Mrg - Input Data",
      "notes": "Pode ter o payload do Lpop ou... quando é typing, do próprio trigger!"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceUrl }}/message/presence",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('Nml - Inbox Event').item.json.message.chatId }}\",\n  \"presence\": \"{{ $('Nml - Inbox Event').item.json.event == \"conversation_typing_on\" ? \"composing\" : \"paused\" }}\"\n  {{\n    ($('Nml - Inbox Event').item.json.event == \"conversation_typing_on\"\n      ? `,\"delay\": 4000`\n      : ''\n    )\n  }}\n}",
        "options": {
          "timeout": 2000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        192,
        -528
      ],
      "id": "291aa58f-5448-47a7-a1da-e3b68cb737c3",
      "name": "Uazapi - Composing controller",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "={{ $('When Executed by Another Workflow').item.json.check.body.event }} ({{ $json.toSend.body.conversation.meta.sender.identifier.split('@')[0] }})"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        -3248,
        -192
      ],
      "id": "866dfc9e-3a04-4af6-992f-239acbaf907a",
      "name": "Typing Event"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "01734203-da2d-485d-9ff6-85d36442cfb6",
              "leftValue": "={{ $('Uazapi - Send Media').item.json.error.message }}",
              "rightValue": "not available",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "dcba89a3-893b-46e6-b5d4-d3a53b1cafc3",
              "leftValue": "={{ $runIndex }}",
              "rightValue": 8,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        432,
        624
      ],
      "id": "2e9061a0-ee26-436b-9e1b-87c02a38ac61",
      "name": "Mídia não disponível ainda (8x)?"
    },
    {
      "parameters": {
        "content": "## Loop para dar suporte a múltiplos arquivos de uma só vez",
        "height": 432,
        "width": 976,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -176,
        448
      ],
      "typeVersion": 1,
      "id": "e281db07-cf5a-4ab2-862e-c50e46984043",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Cacheia mensagem para atualização",
        "height": 256,
        "width": 528,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        704,
        144
      ],
      "typeVersion": 1,
      "id": "01e0ab8b-14fd-4008-9f80-2a835a79154f",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Retrigger queue",
        "height": 256,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2272,
        160
      ],
      "typeVersion": 1,
      "id": "e07ac7af-48d8-4e6b-900b-1df7b971aea1",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Typing controller",
        "height": 368,
        "width": 608,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        144,
        -608
      ],
      "typeVersion": 1,
      "id": "98d717a1-b215-490d-9236-0c5aec5ee6b0",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        624,
        688
      ],
      "id": "bd8f9cb8-a3e6-4491-b370-56ea7c7eb4a2",
      "name": "Wait 2s",
      "webhookId": "f7428125-0bf2-4bd0-97db-2c90a1f50cb3"
    },
    {
      "parameters": {
        "errorMessage": "Checar..."
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        624,
        560
      ],
      "id": "49392948-a41c-44a5-8d6c-a7482721a5e6",
      "name": "Media unavaliable"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "87905f15-a777-4e17-bebe-1a2b13533eea",
              "leftValue": "={{ $json.error.message }}",
              "rightValue": "timeout of 2000ms exceeded",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        368,
        -448
      ],
      "id": "b3979457-f9f1-42d4-9082-5969136f7776",
      "name": "Erro programado (release flow timeout)?"
    },
    {
      "parameters": {
        "errorMessage": "Checar!"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        576,
        -384
      ],
      "id": "9f1bad8e-7a8f-44aa-8af8-b0e460547b0b",
      "name": "Unknow Error"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "={{ $('Redis - Queue Processor').item.json.lpopResult }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        2576,
        240
      ],
      "id": "c894a730-6f34-46e4-b732-614d1237257f",
      "name": "Execution Data1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6c042438-74f7-460e-b896-725b911e3277",
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor.eventType }}",
                    "rightValue": "SYSTEM_COMMAND",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "command_event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ [\"conversation_typing_on\", \"conversation_typing_off\"].includes($('When Executed by Another Workflow').item.json.check?.body.event) }}",
                    "rightValue": "typing_event",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "d5eb1a49-c55e-4eea-bb21-0f7df5cfa292"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "typing_event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ae5ae1e2-1a47-4fb4-a089-f0ba534c6df1",
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor.eventType }}",
                    "rightValue": "DELETED_MESSAGE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "deletion_event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "55c3a9cd-efac-48ad-8275-72891e19eb20",
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "message_event"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -4224,
        96
      ],
      "id": "d2804a0c-440e-41eb-925e-922eb63d863f",
      "name": "Switch1"
    },
    {
      "parameters": {
        "content": "## Queue get data",
        "height": 192,
        "width": 416,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3392,
        144
      ],
      "typeVersion": 1,
      "id": "f00f8f12-593a-4813-afae-8edb5514eda8",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "## Empty? Release lock!\n(Estou removendo no código mesmo)",
        "height": 240,
        "width": 416,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3392,
        336
      ],
      "typeVersion": 1,
      "id": "dd2724fa-c2c8-42af-991a-9058025b0c05",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "errorMessage": "Check instance configs: Without Instance Token!"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -1648,
        -48
      ],
      "id": "7f45ebef-2470-4414-9e8f-5605df3a7ec8",
      "name": "Stop and Error1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO message_map (stanza_id, cw_message_id, installation, cw_account_id, cw_inbox_id, cw_conversation_id, id_with_owner)\nVALUES (\n  'MID:{{ $('Mrg - Message Data').item.json.messageid }}',\n    {{ $('Mrg - Input Data').item.json.extra.messageId }},\n    '{{ $('Mrg - Input Data').item.json.extra.installationUrl }}',\n    {{ $('Mrg - Input Data').item.json.extra.accountId }},\n    {{ $('Mrg - Input Data').item.json.extra.contac_inbox.inbox_id }},\n    {{ $('Mrg - Input Data').item.json.extra.conversationId }},\n    '{{ $('Mrg - Message Data').item.json.id }}'\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2064,
        240
      ],
      "id": "6ae272f0-b5cb-4056-8648-1648ad7dde23",
      "name": "Map Message Ids",
      "credentials": {
        "postgres": {
          "id": "QeMSSLFdVbZAMK8b",
          "name": "yib_api_conector"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -144,
        -592
      ],
      "id": "58354303-cbbd-4b76-9ba6-86308ae696e4",
      "name": "Bug temporário"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5f37421d-b3cf-40b7-a1ae-bd482706914a",
              "leftValue": "={{ $('Nml - Inbox Event').item.json.event }}",
              "rightValue": "conversation_typing_off",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -144,
        -432
      ],
      "id": "f4505058-e692-468e-bfe3-4d454a431fc2",
      "name": "Paused?"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "={{ $('Nml - Inbox Event').item.json.event }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        576,
        -544
      ],
      "id": "f5aaeaeb-834b-4b85-b329-76711694f997",
      "name": "Sucess!"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM message_map\nWHERE cw_message_id = {{ $('Nml - Inbox Event').item.json.message.inReplyTo.messageId || $('When Executed by Another Workflow').item.json.extra.messageId }}\nAND cw_account_id = {{ $('Nml - Instance Chatwoot Cached Data').item.json.accountId }}\nAND cw_inbox_id = {{ $('Nml - Instance Chatwoot Cached Data').item.json.inboxId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -800,
        16
      ],
      "id": "37837a45-2311-4d44-8983-6a7381854660",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "QeMSSLFdVbZAMK8b",
          "name": "yib_api_conector"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2304,
        928
      ],
      "id": "d3571b12-eb10-47ab-be35-d777570b8e20",
      "name": "Organizer Return Loop"
    },
    {
      "parameters": {
        "content": "### Sem token, pelo método atual, não dá pra enviar mensagem de erro. Pra conseguir isso eu tenho que replicar toda a parte de criação do contato/conversa fora do flow MAIN já existente sem depender do token pra buscar dados do Chatwoot, o que é possível. Só é eu enviar esses dados pra lá, e nesse caso, não fazer consulta no DB pra pegar dados do Chatwoot! O próprio Token vazio pode ser a verificação!!!",
        "height": 176,
        "width": 544
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1648,
        -240
      ],
      "typeVersion": 1,
      "id": "bedfa18d-49d8-46fd-ba97-80dfa8fd01cd",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "### No payload de envio não estou condicionando mensagens deletadas para não enviar propriedade de reply, nessa api, não dá problema! Mas, é um ponto de atenção: ![](https://i.imgur.com/oM5aLUw.png)",
        "height": 224,
        "width": 496,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        208,
        -896
      ],
      "typeVersion": 1,
      "id": "3cd23502-fdc4-429b-a28b-97800edd3f3d",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "### Em caso de erro precisamos mandar isso láaa pro flow Uazapi receptor pra ele conseguir recuperar os dados da instância e enviarmos certinho a mensagem de sistema.",
        "width": 320,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1744,
        480
      ],
      "typeVersion": 1,
      "id": "c1d28804-4a97-40d8-9a4d-7e9548927e0c",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=context:exec:{{ $executionId }}",
        "value": "={{ JSON.stringify({\n\"instanceToken\": $('Get Inbox Token').item.json.data || $('Nml - Instance Token to Cache').item.json.data\n}) }}",
        "expire": true,
        "ttl": 3600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1648,
        320
      ],
      "id": "d336b701-6ec8-4277-a286-c0ce431684fc",
      "name": "push Token On Context Key (1h)",
      "credentials": {
        "redis": {
          "id": "LK9rDtqYoR5e5wVE",
          "name": "Conector Chatwoot | GFSD | DB10"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const { createClient } = require('redis');\n\nconst executionId = $execution.id;\nconst processingQueueKey = `processing:exec:${executionId}`;\n\nconst client = createClient({\n  socket: { host: 'redis', port: 6379 },\n  database: 10\n});\n\ntry {\n  await client.connect();\n  await client.del([processingQueueKey, contextKey]);\n} catch (error) {\n  // Apenas registre o erro.\n} finally {\n  if (client.isOpen) {\n    await client.quit();\n  }\n}\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2800,
        240
      ],
      "id": "01739b97-3464-43bc-9a94-84acfe5e72ed",
      "name": "Delete Message Keys"
    },
    {
      "parameters": {
        "content": "### Limpamos a chave de processamento DESTA mensagem processada. Não é nem só uma questão de limpeza da chave que já tendo expire não seria um grande problema de acúmulo, mas como estamos em loop, a execução vai continuar a mesma, e como não houve lpop, agora precisamos remover manualmente a mensagem da \"mesa de trabalho\".\n\n### Quando dá erro, quem limpa a work table é o primeiro node do flow error handler já no Lpop. No meio só é decidido se reenfileiramos esse payload (attempts <=3)",
        "height": 400,
        "width": 368,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2576,
        -128
      ],
      "typeVersion": 1,
      "id": "d09d05c2-0027-4b29-9662-6a7960a50b9b",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "content": "### MAAS... em caso de erro vai ser mesmo outra execução!!! Reengatilhamos!",
        "height": 400,
        "width": 368,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2960,
        -128
      ],
      "typeVersion": 1,
      "id": "4b9f9cfe-49b4-498e-b570-542cc9f7cf8e",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f3c36c4b-cd7d-42e8-a6f4-38eca7944ded",
              "leftValue": "={{ $('Redis - Queue Processor').item.json.attempt }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1296,
        224
      ],
      "id": "8741ce24-11c9-407b-bfac-59ac0d4c64fe",
      "name": "Attempts?"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM message_map\nWHERE cw_message_id = {{ $('Mrg - Input Data').item.json.extra.messageId }}\n  AND installation = '{{ $('Mrg - Input Data').item.json.extra.installationUrl }}'\n  AND cw_account_id = {{ $('Mrg - Input Data').item.json.extra.accountId }}\n  AND cw_inbox_id = {{ $('Mrg - Input Data').item.json.extra.contac_inbox.inbox_id }};",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1488,
        96
      ],
      "id": "a8bda6c6-ee4c-4dd3-9821-46cd16538d96",
      "name": "Delete Maped ID",
      "credentials": {
        "postgres": {
          "id": "QeMSSLFdVbZAMK8b",
          "name": "yib_api_conector"
        }
      }
    },
    {
      "parameters": {
        "content": "### No flow handler criamos um ID fake pra conseguir responder a mensagem do Chatwoot pelo Uazapi receptor (que faz isso buscando no banco, então pra simular e reutilizar o flow, usamos esse fake id). Mas aqui, ao ter sucesso, vai dar erro de UNIQUE no próximo se eu não apagar esse fake antes de adicionar o da mensagem enviada com sucesso após falha.",
        "height": 240,
        "width": 336
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1392,
        -144
      ],
      "typeVersion": 1,
      "id": "f09bb213-7b5c-45b6-9630-8eccc89ff79b",
      "name": "Sticky Note17"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        384,
        224
      ],
      "id": "9d10adcb-77bf-459f-9380-c5b2bf7a0c0b",
      "name": "Mrg - Message Data"
    },
    {
      "parameters": {
        "content": "### Não posso esperar, se esperar, tenho que jogar à frente do map do ID real, ou o MAIN não vai conseguir encontrar a mensagem para resposta.",
        "height": 128,
        "width": 336
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1792,
        -16
      ],
      "typeVersion": 1,
      "id": "89db409f-c4cc-4ba6-b66d-6679a0861d21",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dfb08b08-8cd7-4b51-81fc-7e11cbd786ce",
              "name": "executionId",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "1f1a8f53-9d56-4818-96be-9b7349e30cfc",
              "name": "chatId",
              "value": "={{ $('Nml - Inbox Event').item.json.message.chatId }}",
              "type": "string"
            },
            {
              "id": "78863204-9cd0-4ffa-8788-f132fb6a7a25",
              "name": "stanzaId",
              "value": "={{ $('Mrg - Message Data').item.json.messageid }}",
              "type": "string"
            },
            {
              "id": "46d9373d-c1bb-4493-b31c-ad0ec01be34f",
              "name": "attempt",
              "value": "={{ $('Redis - Queue Processor').item.json.attempt }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1664,
        96
      ],
      "id": "0d1619f6-f923-431b-9c12-33f9233b08a6",
      "name": "inputValues"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "=Message Deleted"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        -3248,
        -16
      ],
      "id": "5dcd4620-8c3a-4b69-8656-6378f5d2a478",
      "name": "Deletion Event"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "32a6463b-e541-48fc-be79-d5a2eed8279a",
              "leftValue": "={{ $('Nml - Inbox Event').item.json.message.inReplyTo.isReply }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "df7449c1-7e98-4079-bcee-f53456d9553c",
              "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor.eventType }}",
              "rightValue": "DELETED_MESSAGE",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1008,
        208
      ],
      "id": "aac0e468-1ea1-472f-90a5-a1d571d4606e",
      "name": "Quoted OR Deleted?"
    },
    {
      "parameters": {
        "content": "### Tem um OU para evento de mensagem deletada",
        "height": 96,
        "width": 192,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -864,
        -80
      ],
      "typeVersion": 1,
      "id": "2c3c28f2-4881-489a-b3cf-e8f6e623a525",
      "name": "Sticky Note19"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE message_map\nSET deleted = true\nWHERE cw_message_id = {{ $('Mrg - Input Data').item.json.extra.messageId }}\n  AND installation = '{{ $('Mrg - Input Data').item.json.extra.installationUrl }}'\n  AND cw_account_id = {{ $('Mrg - Input Data').item.json.extra.accountId }}\n  AND cw_inbox_id = {{ $('Nml - Instance Chatwoot Cached Data').item.json.inboxId }};",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        80,
        -192
      ],
      "id": "2c26682b-32f9-4564-af89-57463f5bfa5b",
      "name": "Delete Maped ID1",
      "credentials": {
        "postgres": {
          "id": "QeMSSLFdVbZAMK8b",
          "name": "yib_api_conector"
        }
      }
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "=Command Event"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        -3248,
        -400
      ],
      "id": "44280881-0a53-4637-944d-9060043eade7",
      "name": "Command Event"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor.command }}",
                    "rightValue": "limpar",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "22c64cdc-32e4-4d80-a842-df50c85a7f4b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Limpar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "db19d8a1-ea35-46a8-855f-390e73169ceb",
                    "leftValue": "",
                    "rightValue": "comando2",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "comando2"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -240,
        1520
      ],
      "id": "ff62363d-b25d-4eaf-b978-fec8b6e78f36",
      "name": "Switch2"
    },
    {
      "parameters": {
        "jsCode": "const { createClient } = require('redis');\nconst queueKey = $('When Executed by Another Workflow').first().json.queueKey;\nconst lockKey = $('When Executed by Another Workflow').first().json.lockKey;\nconst client = createClient({\n  socket: { host: 'redis', port: 6379 },\n  database: 10\n});\n\nlet queueValue = null;\nlet queueLength = 0;\nlet lockValue = null;\nlet deletedCount = 0;\n\ntry {\n  await client.connect();\n  \n  // Captura valor do lock (string)\n  lockValue = await client.get(lockKey);\n  \n  // Captura valor da queue (lista) - pega toda a lista\n  queueValue = await client.lRange(queueKey, 0, -1);\n  \n  // Conta quantos itens tinha na fila\n  queueLength = await client.lLen(queueKey);\n  \n  // Apaga as chaves\n  deletedCount = await client.del([queueKey, lockKey]);\n  \n} catch (error) {\n  throw new Error(`Falha na operação Redis: ${error.message}`);\n} finally {\n  try {\n    if (client && client.isOpen) {\n      await client.quit();\n    }\n  } catch (closeError) {\n    console.error('Erro ao fechar conexão Redis:', closeError.message);\n  }\n}\n\nreturn {\n  queueKey: queueKey,\n  queueValue: queueValue,\n  queueLength: queueLength,  // ← Quantidade de itens na fila\n  lockKey: lockKey, \n  lockValue: lockValue,\n  deletedCount: deletedCount\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        1504
      ],
      "id": "e7b9ad44-87f1-407d-93dd-dd76c8166dbd",
      "name": "Delete Message Keys1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "Lkv0fR9RqlZGdDm0",
          "mode": "list",
          "cachedResultName": "MAIN - Uazapi Receptor (TOuazapi/contact)"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        704,
        1504
      ],
      "id": "b4e47f98-38b1-4d75-acc8-4d8025a6334e",
      "name": "\"MAIN Uazapi receptor\" Create Sys Message1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5ae48456-86f1-4013-b4bb-498d9cbe7898",
              "name": "chatId",
              "value": "={{ $('Nml - Inbox Event').item.json.message.chatId }}",
              "type": "string"
            },
            {
              "id": "8106b7f1-9201-4245-b954-ce7a5e07761a",
              "name": "text",
              "value": "=🗑️✅ Fila do contato limpa com sucesso!",
              "type": "string"
            },
            {
              "id": "a37243cc-c4b4-426c-97a1-896b465883eb",
              "name": "instanceToken",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        320,
        1504
      ],
      "id": "a1c1e91a-c39e-4032-8589-b2bfa579b8ad",
      "name": "Data System Message (Chat Info)"
    },
    {
      "parameters": {
        "jsCode": "//var systemMessageType = $('Data System Message (Chat Info)').item.json.systemMessageType;\nvar text = $('Data System Message (Chat Info)').item.json.text;\nvar chatId = $('Data System Message (Chat Info)').item.json.chatId;\nvar instanceToken = $('Data System Message (Chat Info)').item.json.instanceToken;\n\nvar data = {\n  body: {\n    \"EventType\": \"messages\",\n    \"message\": {\n      \"chatid\": chatId,\n      \"content\": {\n        \"text\": \"**SYSTEM:** ...\",\n      },\n      \"fromMe\": true,\n      \"isGroup\": false,\n      \"messageid\": \"\",\n      \"senderName\": \"\",\n      \"source\": \"yib_sys\",\n      \"text\": `**SYSTEM:** ${text}`,\n      \"type\": \"text\",\n      \"wasSentByApi\": false\n    },\n    \"token\": instanceToken\n  },\n  \"executionMode\": \"production\",\n  \"switchProcessor\": {\n    \"eventType\": \"SYSTEM_MESSAGE_ERROR\",\n    \"discordReason\": \"\"\n  }\n}\nreturn [{\n  json: data\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        1504
      ],
      "id": "c7179188-3715-4b52-992a-ca27f45e6b9d",
      "name": "Data System Message (Chat Info)1"
    },
    {
      "parameters": {
        "content": "## Limpar",
        "height": 208,
        "width": 192,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        32,
        1440
      ],
      "typeVersion": 1,
      "id": "e6db2071-d917-4ed3-9afe-b1e9a4cc948b",
      "name": "Sticky Note20"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceUrl }}/message/delete",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"id\": \"{{ $('Execute a SQL query').item.json.id_with_owner }}\"\n}",
        "options": {
          "timeout": 2000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -144,
        -192
      ],
      "id": "14287118-4281-4061-a35a-0a713f980846",
      "name": "Uazapi - Delete message",
      "executeOnce": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceUrl }}/message/react",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('Nml - Inbox Event').item.json.message.chatId }}\",\n  \"text\": {{ $('Nml - Inbox Event').item.json.message.content.toJsonString() }},\n  \"readchat\": true\n  {{\n      $('Nml - Inbox Event').item.json.message.inReplyTo.isReply && \n        $('Execute a SQL query').item.json.stanza_id ? \n      ',\"id\": \"' + $('Execute a SQL query').item.json.stanza_id.replace('MID:','') + '\"' : ''\n  }}\n}\n\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -144,
        16
      ],
      "id": "7fd03241-d8f6-40f9-8ab4-c19da56b316b",
      "name": "Uazapi - Send Reaction"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "jzm0g9mDvyO2uPjw",
          "mode": "list",
          "cachedResultName": "My workflow 8"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1856,
        96
      ],
      "id": "30b4ddf2-6f92-46aa-aaa4-afb7d9ad4215",
      "name": "Execute Error Handler"
    },
    {
      "parameters": {
        "content": "## Envia feedback de enviado com sucesso se a mensagem foi salva nas retentativas",
        "height": 96,
        "width": 496,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1520,
        -256
      ],
      "typeVersion": 1,
      "id": "87bfefc6-7188-4442-a782-df2f636e7e16",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "jsCode": "const { createClient } = require('redis');\n\nvar data = $input.item.json;\nvar queueKey = data.queueKey;\nconst executionId = $execution.id;\nconst processingQueueKey = `processing:exec:${executionId}`;\n\nconst client = createClient({\n  socket: {\n    host: 'redis',\n    port: 6379\n  },\n  database: 10\n});\n\nlet movedPayloadString = null;\n\ntry {\n  await client.connect();\n  //const poppedPayloadString = await client.lPop(queueKey); // Puxa o primeiro item (payload) da fila. ← DEPRECATED!\n\n  movedPayloadString = await client.lMove(queueKey, processingQueueKey, 'LEFT', 'RIGHT'); // Move a mensagem mais antiga da fila principal para a fila de trabalho única ← LATEST!\n  \n  if (movedPayloadString) { // Se um payload foi retornado (movido), processa-o\n    await client.expire(processingQueueKey, 3600); //1h Apenas para limpeza. Worktable efêmero.\n    const remainingCount = await client.lLen(queueKey); // Obtém a quantidade de itens restantes na fila (APÓS remoção do atual!) para debug.\n\n    movedPayloadString = JSON.parse(movedPayloadString); //Parseia o payload retornado.\n    $input.item.json = { ...data, ...movedPayloadString }; // Somar este payload à queueKey & lockKey do input.\n    $input.item.json.lpopResult = `Fila [${queueKey}] agora tem ${remainingCount} itens`; // Debug para execution data (só faz sentido em auto trigger, não em loop... ou, faz em caso de falha)\n  } else {\n    // Se não há mais mensagens para processar, zeramos a fila, precisamos remover o lock. Vou fazer logo aqui em código pra não usar outro node Redis.\n    await client.del(data.lockKey);\n    $input.item.json.lpopResult = `Fila [${queueKey}] esvaziada. Lock removido!`;\n  }\n  \n} catch (error) {\n  throw error;\n} finally {\n  if (client.isOpen) {\n    await client.quit();\n  }\n}\n  \nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3888,
        272
      ],
      "id": "aa6854ea-6e3b-44d9-ad45-0ee81fa8634d",
      "name": "Redis - Queue Processor",
      "notes": "O fato de eu concatenar a entrada com a saída pode gerar loop se eu enviar o payload inteiro como input. Porque mesmo que o lmove não retorne nada, eu vou concatenar isso com o payload inteiro, então se for uma mensagem, vai enviá-la em loop."
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -608,
        80
      ],
      "id": "c8a5584f-8c7e-49b1-9465-328ecfce7e15",
      "name": "Merge"
    },
    {
      "parameters": {
        "content": "### Em caso de responder com mídia falha porque o entrar no split são os dados do db",
        "height": 96,
        "width": 224,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -608,
        -16
      ],
      "typeVersion": 1,
      "id": "34829671-7452-4380-b074-54215bac1b80",
      "name": "Sticky Note21"
    },
    {
      "parameters": {
        "databaseId": 2,
        "tableId": 2,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 20,
                "operator": "contains",
                "value": "={{ $('Mrg - Input Data').item.json.extra.contac_inbox.inbox_id }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -2480,
        -224
      ],
      "id": "e709428a-f006-4c9f-a327-833b19de266e",
      "name": "Filter By Inbox ID2",
      "alwaysOutputData": true,
      "credentials": {
        "baserowApi": {
          "id": "N3S7Up9lxzeWvlCq",
          "name": "Baserow | GFSD"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "p8kognfpgie99m4",
        "table": "mecvnmr8bl6bwch",
        "returnAll": true,
        "options": {
          "fields": [],
          "where": "=(Inbox Id,eq,{{ $('Mrg - Input Data').item.json.extra.contac_inbox.inbox_id }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -2208,
        64
      ],
      "id": "1dab198a-a5a1-4844-bb9b-dbfb7d482d0a",
      "name": "Filter By Inbox ID",
      "credentials": {
        "nocoDbApiToken": {
          "id": "blXhOmf6FmXbmDyc",
          "name": "NocoDB | GFSD"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "height": 208,
        "width": 256,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3936,
        224
      ],
      "id": "62183597-bedd-4053-a995-05b38d1ba6f5",
      "name": "Sticky Note22"
    },
    {
      "parameters": {
        "content": "",
        "height": 208,
        "width": 256,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3936,
        432
      ],
      "id": "d6af4253-b6aa-4a50-987a-20a98a870c54",
      "name": "Sticky Note23"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceUrl }}/send/media",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('Nml - Inbox Event').item.json.message.chatId }}\",\n  {{\n    $('Nml - Inbox Event').item.json.message.content\n      ? `\"text\": \"${$('Nml - Inbox Event').item.json.message.content}\",`\n      : ''\n  }}\n  \"type\": \"{{ \n  (() => {\n    const type = $('Split Out').item.json.attachment.type;\n    const typeMap = {\n      \"file\": \"document\",\n      \"audio\": \"ptt\"\n    };\n    return typeMap[type] || type;\n  })() \n}}\",\n  \"file\": \"{{ $('Split Out').item.json.attachment.url }}\"{{\n    $('Split Out').item.json.attachment.type === 'file' ? \n    ',\"docName\": \"' + ($('Split Out').item.json.attachment.fileName || 'File') + '\"' : ''\n  }},\n  \"readchat\": true\n  {{\n      $('Nml - Inbox Event').item.json.message.inReplyTo.isReply && \n        $('Execute a SQL query').item.json.stanza_id ? \n      ',\"replyid\": \"' + $('Execute a SQL query').item.json.stanza_id.replace('MID:','') + '\"' : ''\n  }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        208,
        608
      ],
      "id": "e1c01629-f741-4004-b9c0-9441d6a76504",
      "name": "Uazapi - Send Media1",
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// input fictício para n8n, não precisa copiar esta linha no seu nó\ninput = $('Mrg - Input Data').first().json;\n// --- Lógica de Variáveis ---\nconst replyToId = input.toSend.body.content_attributes?.in_reply_to;\n// Acessa o array de anexos de forma segura\nconst sourceAttachments = input.toSend.body.attachments;\n// Calcula a quantidade de anexos. Usa o `?? 0` para garantir que seja um número (0 se não houver anexos).\nconst attachmentsCount = sourceAttachments?.length ?? 0;\n// --- Objeto de Retorno ---\nreturn {\n  event: input.check.body.event,\n  isPrivate: input.check.body.private,\n  agentName: input.toSend.body.conversation.messages[0].sender.available_name,\n  message: {\n    chatId: input.toSend.body.conversation.meta.sender.identifier,\n    content: input.toSend.body.content,\n    inReplyTo: {\n      isReply: !!replyToId,\n      ...(replyToId && { messageId: replyToId }),\n    },\n    // --- Lógica de Anexos Atualizada ---\n    attachments: {\n      attachmentsCount: attachmentsCount,\n      // Adiciona a propriedade 'content' apenas se a contagem for maior que 0\n      ...(attachmentsCount > 0 && {\n        content: sourceAttachments.map(att => {\n          const baseAttachment = {\n            id: att.id,\n            type: att.file_type,\n            url: att.data_url\n          };\n          \n          // Adiciona fileName se o file_type for \"file\"\n          if (att.file_type === 'file') {\n            // Extrai o nome do arquivo da URL (última parte após a /)\n            const urlParts = att.data_url.split('/');\n            const encodedFileName = urlParts[urlParts.length - 1];\n            // Decodifica o nome do arquivo\n            baseAttachment.fileName = decodeURIComponent(encodedFileName);\n          }\n          \n          return baseAttachment;\n        })\n      })\n    },\n  },\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1232,
        320
      ],
      "id": "552a5a3f-2351-41c2-9ef7-39e3bfc0986f",
      "name": "Nml - Inbox Event"
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Paused?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Uazapi - Delete message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Uazapi - Send Reaction",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Uazapi - Send Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Instance Chatwoot Data": {
      "main": [
        [
          {
            "node": "Nml - Instance Chatwoot Cached Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - Instance Chatwoot Cached Data": {
      "main": [
        [
          {
            "node": "push Token On Context Key (1h)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Inbox Token": {
      "main": [
        [
          {
            "node": "No data?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No data?1": {
      "main": [
        [
          {
            "node": "Filter By Inbox ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Instance Chatwoot Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Keys": {
      "main": [
        [
          {
            "node": "Get Inbox Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter By Account Id": {
      "main": [
        [
          {
            "node": "No data?2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache Inbox Token (30D)": {
      "main": [
        [
          {
            "node": "Get Instance Chatwoot Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No data?2": {
      "main": [
        [
          {
            "node": "Stop and Error1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Nml - Instance Token to Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - Instance Token to Cache": {
      "main": [
        [
          {
            "node": "Cache Inbox Token (30D)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Send Text": {
      "main": [
        [
          {
            "node": "Mrg - Message Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message status - Delivered": {
      "main": [
        [
          {
            "node": "Cache message (As Delivered!)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache MESSAGE type key": {
      "main": [
        [
          {
            "node": "Message status - Delivered",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache message (As Delivered!)": {
      "main": [
        [
          {
            "node": "Attempts?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Send Media": {
      "main": [
        [],
        []
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Mrg - Message Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Uazapi - Send Media1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Items?": {
      "main": [
        [
          {
            "node": "Mrg - Input Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execution Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InputKeys": {
      "main": [
        [
          {
            "node": "Execution Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mrg - Input Data": {
      "main": [
        [
          {
            "node": "Redis Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Composing controller": {
      "main": [
        [
          {
            "node": "Sucess!",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Erro programado (release flow timeout)?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Typing Event": {
      "main": [
        [
          {
            "node": "Mrg - Input Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mídia não disponível ainda (8x)?": {
      "main": [
        [
          {
            "node": "Media unavaliable",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait 2s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 2s": {
      "main": [
        [
          {
            "node": "Uazapi - Send Media1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Erro programado (release flow timeout)?": {
      "main": [
        [
          {
            "node": "Sucess!",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unknow Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execution Data1": {
      "main": [
        [
          {
            "node": "Delete Message Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Command Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Typing Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Deletion Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis - Queue Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map Message Ids": {
      "main": [
        [
          {
            "node": "InputKeys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Paused?": {
      "main": [
        [
          {
            "node": "Bug temporário",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Uazapi - Composing controller",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organizer Return Loop": {
      "main": [
        [
          {
            "node": "Redis - Queue Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "push Token On Context Key (1h)": {
      "main": [
        [
          {
            "node": "Nml - Inbox Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Message Keys": {
      "main": [
        [
          {
            "node": "Organizer Return Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attempts?": {
      "main": [
        [
          {
            "node": "Delete Maped ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Map Message Ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Maped ID": {
      "main": [
        [
          {
            "node": "inputValues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mrg - Message Data": {
      "main": [
        [
          {
            "node": "Cache MESSAGE type key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inputValues": {
      "main": [
        [
          {
            "node": "Execute Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deletion Event": {
      "main": [
        [
          {
            "node": "Mrg - Input Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quoted OR Deleted?": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Event": {
      "main": [
        [
          {
            "node": "Mrg - Input Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Delete Message Keys1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Message Keys1": {
      "main": [
        [
          {
            "node": "Data System Message (Chat Info)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data System Message (Chat Info)": {
      "main": [
        [
          {
            "node": "Data System Message (Chat Info)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data System Message (Chat Info)1": {
      "main": [
        [
          {
            "node": "\"MAIN Uazapi receptor\" Create Sys Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Delete message": {
      "main": [
        [
          {
            "node": "Delete Maped ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Send Reaction": {
      "main": [
        [
          {
            "node": "InputKeys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Error Handler": {
      "main": [
        [
          {
            "node": "Map Message Ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis - Queue Processor": {
      "main": [
        [
          {
            "node": "Has Items?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter By Inbox ID2": {
      "main": [
        []
      ]
    },
    "Filter By Inbox ID": {
      "main": [
        [
          {
            "node": "Filter By Account Id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Send Media1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Mídia não disponível ainda (8x)?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - Inbox Event": {
      "main": [
        [
          {
            "node": "Quoted OR Deleted?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "d20aa078faf0f59be6db05437e517164a2d2c557f877331fcc3ac9a0b8ba692f"
  }
}